<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Tools on 时光小栈</title>
        <link>http://blog.pytool.com/tool/</link>
        <language>zh-CN</language>
        <author>rinetd</author>
        <rights>Copyright (c) 2015, rinetd; all rights reserved.</rights>
        <updated>Wed, 05 Oct 2016 16:46:14 CST</updated>
        
        <item>
            <title>Chrome扩展插件</title>
            <link>http://blog.pytool.com/tool/2016-01-01-chrome%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2016-01-01-chrome%E6%89%A9%E5%B1%95%E6%8F%92%E4%BB%B6/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://github.com/Selection-Translator/crx-selection-translate&#34; target=&#34;_blank&#34;&gt;划词翻译&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;JSONView&lt;/p&gt;

&lt;p&gt;JSONView 是一个方便查看 Json 结构的插件，展开，折叠，看接口返回数据就是这么方便。&lt;br /&gt;
直达链接&lt;br /&gt;
SnappySnippet&lt;/p&gt;

&lt;p&gt;有时候想在 Codepen, JS Bin, jsFiddle 等平台演示 bug 或者装个五毛的 B ,但限于样式拆分得太细，难以抽离，SnappySnippet 可以快速帮你完成这项苦差事。&lt;br /&gt;
直达链接&lt;br /&gt;
EditThisCookie&lt;/p&gt;

&lt;p&gt;EditThisCookie 是个修改 Cookie 的快捷工具。&lt;br /&gt;
直达链接&lt;br /&gt;
Validity&lt;/p&gt;

&lt;p&gt;Validity 可以用来快速验证你的 HTMl 文档明显错误，比如少了个结束标签，使用了不规范标签，缺少了某些属性等等。&lt;br /&gt;
直达链接&lt;br /&gt;
Responsive Web Design Tester&lt;/p&gt;

&lt;p&gt;移动端页面适配利器，使用 Responsive Web Design Tester，你可以快速在目标尺寸上打开页面，可以自己配置尺寸，修改 UserAgent, 整体效果比 Chrome 自带模拟器更赞~&lt;br /&gt;
直达链接&lt;br /&gt;
Allow-Control-Allow-Origin: *&lt;/p&gt;

&lt;p&gt;JS 同源策略保障我们的页面安全，但是开发期间我们并不想看到这烦人的家伙，使用 Allow-Control-Allow-Origin: * 插件轻松解决这个问题 Allow-Control-Allow-Origin: * 。&lt;br /&gt;
直达链接&lt;br /&gt;
Chrome Sniffer Plus&lt;/p&gt;

&lt;p&gt;有时候打开某家公司的页面，很好奇人家用了哪些技术库、框架，Chrome Sniffer Plus 可以为你服务。&lt;br /&gt;
直达链接&lt;br /&gt;
Clear Cache&lt;/p&gt;

&lt;p&gt;快速清除页面缓存？我用 Clear Cache。&lt;br /&gt;
直达链接&lt;br /&gt;
Full Page Screen Capture&lt;/p&gt;

&lt;p&gt;看到酷炫的页面排版，叹为观止的巧妙设计想保存下来？ 使用 Full Page Screen Capture。&lt;br /&gt;
直达链接&lt;br /&gt;
LastPass&lt;/p&gt;

&lt;p&gt;管理页面密码，省去频繁输入测试账号密码的烦恼，为了安全保障，最好还是不要保存购物网站的密码哟~&lt;br /&gt;
直达链接&lt;br /&gt;
Panda 5 | News &amp;amp; Inspiration Dashboard&lt;/p&gt;

&lt;p&gt;Panda 的定位是一个非常优秀的资源阅读器。&lt;br /&gt;
直达链接&lt;br /&gt;
Octotree&lt;/p&gt;

&lt;p&gt;上同性社交网站的时候经常在翻别人源码的时候特别苦恼，特别是你的网络不给力的时候，简直想死，Octotree 帮助你整理出来项目文件列表。&lt;br /&gt;
直达链接&lt;br /&gt;
PerfectPixel&lt;/p&gt;

&lt;p&gt;这是一个像素级对稿的插件，如果你所在的公司也特别有情怀的话，那么这个软件可以省去大把你和设计师对稿的时间。&lt;br /&gt;
直达链接&lt;br /&gt;
Postman&lt;/p&gt;

&lt;p&gt;口碑极好的一个接口调试工具，必备神器，不多说，但是你一定要装。&lt;br /&gt;
直达链接&lt;br /&gt;
AngularJS Batarang / React Developer Tools / Vue.js devtools&lt;/p&gt;

&lt;p&gt;Angular / React / Vue 调试工具。&lt;/p&gt;

&lt;p&gt;AngularJS Batarang&lt;/p&gt;

&lt;p&gt;React Developer Tools&lt;br /&gt;
Vue.js devtools&lt;/p&gt;

&lt;p&gt;上面的插件大部分都没有中文版，而且 Chrome 本来也在墙外，如果你发现自己打不开上面那些链接的话，趁这个机会出个墙吧。&lt;br /&gt;
Stylish&lt;/p&gt;

&lt;p&gt;Stylish 是一个自定义页面外观的工具，比如想去掉 *度 无下限的广告，给它加个 display: none ！&lt;br /&gt;
直达链接&lt;br /&gt;
User-Agent Switcher for Chrome&lt;/p&gt;

&lt;p&gt;切换 User Agent 的插件。&lt;br /&gt;
直达链接&lt;br /&gt;
Web Server for Chrome&lt;/p&gt;

&lt;p&gt;快速启动小项目或Demo的神器。&lt;br /&gt;
直达链接&lt;br /&gt;
一键管理所有扩展&lt;/p&gt;

&lt;p&gt;插件装多了，不好管理？ 启动慢？ 好好管教管教。&lt;br /&gt;
直达链接&lt;br /&gt;
广告终结者&lt;/p&gt;

&lt;p&gt;跟烦人的广告说再见，还你一个干净有情怀的页面。&lt;br /&gt;
直达链接&lt;br /&gt;
页面自动刷新&lt;/p&gt;

&lt;p&gt;定时刷新页面，我还记得当初用它抢到一个 小米2s。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Insomnia</title>
            <link>http://blog.pytool.com/tool/2016-01-01-insomnia/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2016-01-01-insomnia/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://insomnia.rest/documentation/&#34; target=&#34;_blank&#34;&gt;https://insomnia.rest/documentation/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Debug APIs like a human, not a robot&lt;br /&gt;
Finally, a REST client you&amp;rsquo;ll love&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Linux xclip xsel用法</title>
            <link>http://blog.pytool.com/tool/%E5%89%AA%E5%88%87%E6%9D%BF/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/%E5%89%AA%E5%88%87%E6%9D%BF/</guid>
            <description>

&lt;p&gt;Linux: xclip,pbcopy,xsel用法 terminal (mac , ubuntu)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;博客分类： Ubuntu / Mac / Github / Aptana / Nginx / Shell / Linux  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Windows下&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用系统自带的clip命令。&lt;/p&gt;

&lt;h1 id=&#34;位于c-windows-system32-clip-exe&#34;&gt;位于C:\Windows\system32\clip.exe。&lt;/h1&gt;

&lt;p&gt;示例：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo Hello | clip  
# 将字符串Hello放入Windows剪贴板  

dir | clip  
# 将dir命令输出（当前目录列表）放入Windows剪贴板  

clip &amp;lt; README.TXT  
# 将readme.txt的文本放入Windows剪贴板  

echo | clip  
# 将一个空行放入Windows剪贴板，即清空Windows剪贴板  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Ubuntu下&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ubuntu下的用户可以只用apt-get来安装：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install xclip  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他发行版的用户可以选择自己的安装方式，也可以用源码编译安装，xclip项目的主页是：&lt;a href=&#34;http://sourceforge.net/projects/xclip/&#34; target=&#34;_blank&#34;&gt;http://sourceforge.net/projects/xclip/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;xclip可以将内容输出到‘X’的剪切板中，比如：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello, world&amp;quot; | xclip  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行这个命令后你就可以用鼠标中键来在X程序中将内容粘贴出来。但是更多的时候，我们需要不仅仅把内容输出到‘X’的剪切板中，而是希望可以在GUI程序 中用ctrl + v也可以粘贴（比如，输出到gnome的剪切板中），下面这段命令就可以让你将内容输出到gnome的剪切板中：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello, world&amp;quot; | xclip -selection clipboard  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再在一个GUI程序中按下ctrl + v，看下是不是粘贴上去了呢？顺着这个命令，我也重新写了一下ifconfig，让它在执行后输入内容到终端的同时，也将ip地址输出到剪切板中，因为通常情况下，查看ifconfig就是为了获取机器的ip地址：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias ifconfig=&#39;/sbin/ifconfig &amp;amp;&amp;amp; echo `/sbin/ifconfig | sed -n 2p | awk &amp;quot;{ print \\$2 }&amp;quot; | grep -o &amp;quot;[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}&amp;quot;` | xclip -selection clipboard&#39;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xclip -sel clip &amp;lt; file  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时你就可以在网页等编辑框CTRL+V了。&lt;/p&gt;

&lt;p&gt;项目主页：&lt;a href=&#34;http://sourceforge.net/projects/xclip/&#34; target=&#34;_blank&#34;&gt;http://sourceforge.net/projects/xclip/&lt;/a&gt;&lt;br /&gt;
命令man page: &lt;a href=&#34;http://linux.die.net/man/1/xclip&#34; target=&#34;_blank&#34;&gt;http://linux.die.net/man/1/xclip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;-i, -in&lt;br /&gt;
    read text into X selection from standard input or files (default)&lt;br /&gt;
-o, -out&lt;br /&gt;
    prints the selection to standard out (generally for piping to a file or program)&lt;br /&gt;
-f, -filter&lt;br /&gt;
    when xclip is invoked in the in mode with output level set to silent (the defaults), the filter option will cause xclip to print the text piped to standard in back to standard out unmodified&lt;br /&gt;
-l, -loops&lt;br /&gt;
    number of X selection requests (pastes into X applications) to wait for before exiting, with a value of 0 (default) causing xclip to wait for an unlimited number of requests until another application (possibly another invocation of xclip) takes ownership of the selection&lt;br /&gt;
-d, -display&lt;br /&gt;
    X display to use (e.g. &amp;ldquo;localhost:0&amp;rdquo;), xclip defaults to the value in $DISPLAY if this option is omitted&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Linux下&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用xsel命令。&lt;/p&gt;

&lt;p&gt;示例：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat README.TXT | xsel  
cat README.TXT | xsel -b # 如有问题可以试试-b选项  
xsel &amp;lt; README.TXT  
# 将readme.txt的文本放入剪贴板  

xsel -c  
# 清空剪贴板  
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Mac下&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用pbcopy命令。 # 对应有个pbpaste命令。&lt;/p&gt;

&lt;p&gt;示例：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Hello World!&#39; | pbcopy  
# 将字符串Hello World放入剪贴板  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat myFile.txt | pbcopy  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pbpaste &amp;gt; file.txt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;要复制结果又想看到命令的输出&lt;/p&gt;

&lt;p&gt;命令的结果输出时，如果给复制命令（即上面提到的命令clip、xsel、pbcopy）那么命令输出就看不到了。如果你想先看到命令的输出，可以下面这么做。&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;Hello World!&#39; | tee tmp.file.txt  
Hello World!  
$ xsel &amp;lt; tmp.file.txt  
$ rm tmp.file.txt  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即先使用tee命令把输出输到控制台和一个文件中。命令执行完成后，再把输出的内容放到剪贴板中。&lt;/p&gt;

&lt;p&gt;复制SSH的公有KEY&lt;/p&gt;

&lt;p&gt;使用下面的命令：&lt;br /&gt;
C代码  收藏代码&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pbcopy &amp;lt; ~/.ssh/id_rsa.pub  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注：不同系统使用不同的复制命令。避免用文本编辑器打开这个文件、选中文本、CTRL + C这样繁琐操作。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Linux下批量将md文件转换为html文件</title>
            <link>http://blog.pytool.com/tool/2016-01-01-linux%E4%B8%8B%E6%89%B9%E9%87%8F%E5%B0%86md%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAhtml%E6%96%87%E4%BB%B6/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2016-01-01-linux%E4%B8%8B%E6%89%B9%E9%87%8F%E5%B0%86md%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAhtml%E6%96%87%E4%BB%B6/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000000596769&#34; target=&#34;_blank&#34;&gt;https://segmentfault.com/a/1190000000596769&lt;/a&gt;&lt;br /&gt;
要将markdown文件转换成html文件，可以用discount或python-markdown软件包提供的markdown工具。&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install discount&lt;/p&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install python-markdown&lt;/p&gt;

&lt;p&gt;用discount提供的markdown工具转换：&lt;/p&gt;

&lt;p&gt;$ markdown -o Release-Notes.html Release-Notes.md&lt;/p&gt;

&lt;p&gt;用python-markdown提供的markdown_py工具转换：&lt;/p&gt;

&lt;p&gt;$ markdown_py -o html4 Release-Notest.md &amp;gt; Release-Notes.html&lt;/p&gt;

&lt;p&gt;如果要生成PDF，可以用python-pisa提供的xhtml2pdf转换：&lt;/p&gt;

&lt;p&gt;$ sudo apt-get install python-pisa&lt;br /&gt;
$ xhtml2pdf &amp;ndash;html Release-Notes.html Release-Notes.pdf&lt;/p&gt;

&lt;p&gt;也可以在文档目录下放置一个Makefile来自动完成转换过程：&lt;/p&gt;

&lt;h1 id=&#34;makefile&#34;&gt;Makefile&lt;/h1&gt;

&lt;p&gt;MD = markdown&lt;br /&gt;
MDFLAGS = -T&lt;br /&gt;
H2P = xhtml2pdf&lt;br /&gt;
H2PFLAGS = &amp;ndash;html&lt;/p&gt;

&lt;p&gt;SOURCES := $(wildcard *.md)&lt;br /&gt;
OBJECTS := $(patsubst %.md, %.html, $(wildcard *.md))&lt;br /&gt;
OBJECTS_PDF := $(patsubst %.md, %.pdf, $(wildcard *.md))&lt;/p&gt;

&lt;p&gt;all: build&lt;/p&gt;

&lt;p&gt;build: html pdf&lt;/p&gt;

&lt;p&gt;pdf: $(OBJECTS_PDF)&lt;/p&gt;

&lt;p&gt;html: $(OBJECTS)&lt;/p&gt;

&lt;p&gt;$(OBJECTS_PDF): %.pdf: %.html&lt;br /&gt;
    $(H2P) $(H2PFLAGS) $&amp;lt; &amp;gt; $@&lt;/p&gt;

&lt;p&gt;$(OBJECTS): %.html: %.md&lt;br /&gt;
    $(MD) $(MDFLAGS) -o $@ $&amp;lt;&lt;/p&gt;

&lt;p&gt;clean:&lt;br /&gt;
    rm -f $(OBJECTS)&lt;/p&gt;

&lt;p&gt;html输出：&lt;/p&gt;

&lt;p&gt;$ make html&lt;/p&gt;

&lt;p&gt;pdf输出：&lt;/p&gt;

&lt;p&gt;$ make pdf&lt;/p&gt;

&lt;p&gt;如果markdown的内容是中文，那么转换出来的html在浏览器中打开就无法自动识别编码，pdf更惨，直接是一堆乱码。这时可以借助markdown对html标记的支持，在markdown文件中加入编码信息。例如我们要将markdown转换为html文件，可以在文件的开头加上meta标记，指明编码格式：&lt;/p&gt;

&lt;p&gt;$ sed -i &amp;lsquo;1i&amp;lt;meta http-equiv=&amp;ldquo;content-type&amp;rdquo; content=&amp;ldquo;text/html; charset=UTF-8&amp;rdquo;&amp;gt;&amp;rsquo; *.md&lt;/p&gt;

&lt;p&gt;使用以上的方法，转换出来的效果并不理想，所以尝试使用pandoc去转换，在Ubuntu上使用以下指令安装：&lt;/p&gt;

&lt;p&gt;$ sudo apt-get autoremove pandoc&lt;br /&gt;
$ sudo apt-get install cabal-install&lt;br /&gt;
$ cabal update&lt;br /&gt;
$ cabal install pandoc&lt;/p&gt;

&lt;p&gt;html输出：&lt;/p&gt;

&lt;p&gt;$ pandoc Release-Notest.md -o Release-Notes.html&lt;/p&gt;

&lt;p&gt;pdf输出：&lt;/p&gt;

&lt;p&gt;$ pandoc Release-Notest.md -o Release-Notes.pdf&lt;/p&gt;

&lt;p&gt;参考文章&lt;/p&gt;

&lt;p&gt;Linux下批量将md文件批量转换为html文件&lt;br /&gt;
如何在Linux下使用Markdown进行文档工作&lt;br /&gt;
利用Pandoc转换markdown和HTML、LaTeX&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>在线工具</title>
            <link>http://blog.pytool.com/tool/2010-01-01-%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2010-01-01-%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;http://icon.wuruihong.com/&#34; target=&#34;_blank&#34;&gt;图标工场 - 移动应用图标生成工具，一键生成所有尺寸的应用图标&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://explainshell.com/&#34; target=&#34;_blank&#34;&gt;explainshell&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.commandlinefu.com&#34; target=&#34;_blank&#34;&gt;常用命令&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://glyphsearch.com/&#34; target=&#34;_blank&#34;&gt;图标搜索GlyphSearch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GlyphSearch is a tool for searching icons from Glyphicons, Font Awesome, and other popular icon font libraries&lt;/p&gt;

&lt;h2 id=&#34;can-i-use-http-caniuse-com&#34;&gt;&lt;a href=&#34;http://caniuse.com/&#34; target=&#34;_blank&#34;&gt;Can I use&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;关于属性的兼容性，可以通过Can I Use查询&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>用Linux命令行生成随机密码的十种方法</title>
            <link>http://blog.pytool.com/tool/%E7%94%A8linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E7%9A%84%E5%8D%81%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
            <pubDate>Wed, 05 Oct 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/%E7%94%A8linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81%E7%9A%84%E5%8D%81%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
            <description>

&lt;p&gt;Linux操作系统的一大优点是对于同样一件事情，你可以使用高达数百种方法来实现它。例如，你可以通过数十种方法来生成随机密码。本文将介绍生成随机密码的十种方法。&lt;br /&gt;
这些方法均收集于&lt;a href=&#34;http://www.commandlinefu.com/commands/matching/random-password/cmFuZG9tIHBhc3N3b3Jk/sort-by-votes&#34; title=&#34;commandlinefu.com&#34; target=&#34;_blank&#34;&gt;Command-Line Fu&lt;/a&gt;，并且在我们自己的Linux PC机上测试过。这十种方法的一些在安装了&lt;a href=&#34;http://www.cygwin.com/&#34; title=&#34;cygwin&#34; target=&#34;_blank&#34;&gt;Cygwin&lt;/a&gt;的Windows下也是可以运行的，特别是最后一种方法。&lt;/p&gt;

&lt;h2 id=&#34;生成一个随机密码&#34;&gt;生成一个随机密码&lt;/h2&gt;

&lt;p&gt;对于下面的任何一种方法，你可以通过简单的修改来生成特定长度的密码，或者只使用其输出结果的前N位。希望你正在使用一些类似于&lt;a href=&#34;http://www.lastpass.com/&#34; title=&#34;lastpass&#34; target=&#34;_blank&#34;&gt;LastPass&lt;/a&gt;的密码管理器，这样你就不用自己记住这些随机生成的密码了。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这种方法使用SHA算法来加密日期，并输出结果的前32个字符：&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;date +%s | sha256sum | base64 | head -c 32 ; echo&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;这种方法使用内嵌的/dev/urandom，并过滤掉那些日常不怎么使用的字符。这里也只输出结果的前32个字符：&lt;br /&gt;
&lt;code&gt;/dev/urandom tr -dc \_A-Z-a-z-0-9 | head -c${1:-32};echo;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;这种方法使用openssl的随机函数。如果你的系统也许没有安装openssl，你可以尝试其它九种方法或自己安装openssl。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;openssl rand -base64 32&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这种方法类似于之前的urandom，但它是反向工作的。Bash的功能是非常强大的！&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;tr -cd &amp;lsquo;[:alnum:]&amp;rsquo; &amp;lt; /dev/urandom | fold -w30 | head -n1&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这种方法使用string命令，它从一个文件中输出可打印的字符串：&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;strings /dev/urandom | grep -o &amp;lsquo;[[:alnum:]]&amp;rsquo; | head -n 30 | tr -d &amp;lsquo;\n&amp;rsquo;; echo&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;这种方法使用非常有用的dd命令：&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;dd if=/dev/urandom bs=1 count=32 2&amp;gt;/dev/null | base64 -w 0 | rev | cut -b 2- | rev&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;你甚至可以生成一个只用左手便可以输入的密码：&lt;br /&gt;
/dev/urandom tr -dc &amp;lsquo;12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB&amp;rsquo; | head -c8; echo &amp;ldquo;&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;如果每次都使用上述某种方法，那更好的办法是将它保存为函数。如果这样做了，那么在首次运行命令之后，你便可以在任何时间只使用randpw就可以生成随机密码。或许你可以把它保存到你的~/.bashrc文件里面。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;randpw(){ &amp;lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16};echo;}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;最后这种生成随机密码的方法是最简单的。它同样也可以在安装了Cygwin的Windows下面运行。在Mac OS X下或许也可以运行。我敢肯定会有人抱怨这种方法生成的密码没有其它方法来的随机。但实际上如果你使用它生成的全部字符串作为密码，那这个密码就足够随机了。&lt;br /&gt;
date | md5sum&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;是的，这种方法也极其好记。&lt;/p&gt;

&lt;p&gt;原文链接： &lt;a href=&#34;http://www.howtogeek.com/howto/30184/10-ways-to-generate-a-random-password-from-the-command-line/&#34; target=&#34;_blank&#34;&gt;Lowell Heddings&lt;/a&gt; 翻译： &lt;a href=&#34;http://www.geekfan.net&#34; target=&#34;_blank&#34;&gt;极客范&lt;/a&gt; - &lt;a href=&#34;http://www.geekfan.net/author/wangqing/&#34; target=&#34;_blank&#34;&gt;小道空空&lt;/a&gt;&lt;br /&gt;
译文链接： &lt;a href=&#34;http://www.geekfan.net/7064/&#34; target=&#34;_blank&#34;&gt;http://www.geekfan.net/7064/&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Cash</title>
            <link>http://blog.pytool.com/tool/2010-01-01-cash/</link>
            <pubDate>Sun, 07 Aug 2016 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2010-01-01-cash/</guid>
            <description>

&lt;h1 align=&#34;center&#34;&gt;
    &lt;img width=&#34;284&#34; src=&#34;http://i.imgur.com/tKrIdAI.jpg&#34; alt=&#34;Cash&#34;&gt;  
    &lt;!--&lt;img width=&#34;256&#34; src=&#34;http://i.imgur.com/oIN1WsM.jpg&#34; alt=&#34;Cash&#34;&gt;--&gt;  
&lt;/h1&gt;  

&lt;blockquote&gt;
&lt;p&gt;Cross-platform Linux commands in pure ES6&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dthree/cash/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dthree/cash.svg&#34; alt=&#34;Build Status&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://ci.appveyor.com/project/dthree/cash&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/286om4y0wbxs69fy?svg=true&#34; alt=&#34;Windows Build Status&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://coveralls.io/github/dthree/cash?branch=master&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/dthree/cash/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://gitter.im/dthree/cash?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg&#34; alt=&#34;Gitter&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/sindresorhus/xo&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-XO-5ed9c7.svg&#34; alt=&#34;XO code style&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cash is a cross-platform implementation of Unix shell commands written in straight ES6. No native compiling and no external dependencies.&lt;/p&gt;

&lt;p&gt;While young, Cash aims to offer an alternative Linux feel on Windows and to open the door to cross-platform bash scripting in a Javascript environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm install cash -g  
&amp;gt; cash  
$  
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;center&#34;&gt;  
  &lt;img src=&#34;http://i.giphy.com/xT0BKNwUPFhFj2glry.gif&#34; alt=&#34;Cash&#34; /&gt;  
&lt;/p&gt;  

&lt;h3 id=&#34;woah&#34;&gt;Woah.&lt;/h3&gt;

&lt;p&gt;Yeah. But it gets better.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s mix some Windows &amp;amp; Unix commands together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ipconfig | grep IPv4 | sort  
IPv4 Address. . . . . . . . . . . : 10.10.40.50  
IPv4 Address. . . . . . . . . . . : 192.168.100.11  
$  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Usage-|-Interactive&#34; target=&#34;_blank&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;but-i-don-t-want-to-type-cash&#34;&gt;But I don&amp;rsquo;t want to type &amp;ldquo;cash&amp;rdquo;&lt;/h3&gt;

&lt;p&gt;No problem. Let&amp;rsquo;s make all commands global on your system:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm install cash-global -g  
&amp;gt; ls -lah  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Usage-|-Global&#34; target=&#34;_blank&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;nice-but-i-only-want-certain-commands&#34;&gt;Nice, but I only want certain commands&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re covered!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm install cash-ls -g  
&amp;gt; npm install cash-grep -g  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Usage-|-Global#installing-individual-commands&#34; target=&#34;_blank&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;wow-but-i-want-this-programmatically&#34;&gt;Wow. But I want this programmatically!&lt;/h3&gt;

&lt;p&gt;Again, you&amp;rsquo;re in business:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const $ = require(&#39;cash&#39;);  
const out = $.ls(&#39;.&#39;, {l: true});  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not terse enough? How about this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const out = $(&#39;ls -lah&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not :sunglasses: enough? Try this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;cash&#39;) `  
  cp -R ./src ./dest  
  ls | grep *-spec.js | cat  
  rm ./specResults.html  
`;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;For even better programmatic Unix commands, check out &lt;a href=&#34;https://github.com/shelljs/shelljs&#34; target=&#34;_blank&#34;&gt;ShellJS&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Usage-|-Programmatic&#34; target=&#34;_blank&#34;&gt;Learn more&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;isn-t-this-impossible-to-do-in-node&#34;&gt;Isn&amp;rsquo;t this impossible to do in Node?&lt;/h3&gt;

&lt;p&gt;It was, before &lt;a href=&#34;https://github.com/dthree/vorpal&#34; target=&#34;_blank&#34;&gt;Vorpal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Made with ❤ by &lt;a href=&#34;https://github.com/dthree&#34; target=&#34;_blank&#34;&gt;dthree&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Love it? Cash is brand new! Give it a :star: or a tweet to help spread the word!&lt;/p&gt;

&lt;h2 id=&#34;contents&#34;&gt;Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#supported-commands&#34;&gt;Supported commands&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#configuration&#34;&gt;Configuration (.cashrc)&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#faq&#34;&gt;FAQ&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#team&#34;&gt;Team&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#license&#34;&gt;License&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki&#34; target=&#34;_blank&#34;&gt;Wiki&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Cash is a project working on a cross-platform implementation of the most used Unix-based commands in pure JavaScript and with no external dependencies.&lt;/p&gt;

&lt;p&gt;The goal of Cash is to open up these commands to the massive JavaScript community for the first time, and to provide a cleaner, simpler and flexible alternative to applications like Cygwin for those wanting the Linux feel on Windows.&lt;/p&gt;

&lt;p&gt;Cash was built with strict attention to nearly exact implementations and excellent test coverage of over 200 unit tests.&lt;/p&gt;

&lt;h2 id=&#34;supported-commands&#34;&gt;Supported commands&lt;/h2&gt;

&lt;p&gt;The following commands are currently implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;alias&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;cat&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;clear&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;cd&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;cp&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;echo&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;export&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;false&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;grep&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;head&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;kill&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;less&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;ls&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;mkdir&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;mv&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;pwd&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;rm&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;sort&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;source&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;tail&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;touch&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;true&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;unalias&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want more commands?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Roadmap&#34; target=&#34;_blank&#34;&gt;Vote on the next commands&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bit.ly/1LBEJ5s&#34; target=&#34;_blank&#34;&gt;Help spread the word:&lt;/a&gt; More knowledge of Cash equals more contributors&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#contributing&#34;&gt;Contribute&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Want to configure things to your heart&amp;rsquo;s content? Just add your configurations in a &lt;code&gt;.cashrc&lt;/code&gt; file (&lt;code&gt;_cashrc&lt;/code&gt; also works, for Windows folk) and put that in your home directory. This supports anything you can do inside a cash command prompt (&lt;code&gt;export&lt;/code&gt;ing environmental variables, aliases, etc.).&lt;/p&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Contributing#editing-existing-commands&#34; target=&#34;_blank&#34;&gt;Editing commands&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dthree/cash/wiki/Contributing&#34; target=&#34;_blank&#34;&gt;Adding new commands&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are currently looking for Core Team members who can push forward Cash at a rapid rate. Are you an awesome developer up to the challenge? Send me a ping.&lt;/p&gt;

&lt;h3 id=&#34;awesome-contributors&#34;&gt;Awesome contributors&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nfischer&#34; target=&#34;_blank&#34;&gt;@nfischer&lt;/a&gt;: Added &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; commands, among several other contributions.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/safinn&#34; target=&#34;_blank&#34;&gt;@safinn&lt;/a&gt;: Added &lt;code&gt;clear&lt;/code&gt; and &lt;code&gt;tail&lt;/code&gt; commands.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/legien&#34; target=&#34;_blank&#34;&gt;@legien&lt;/a&gt;: Added &lt;code&gt;head&lt;/code&gt; command.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cspotcode&#34; target=&#34;_blank&#34;&gt;@cspotcode&lt;/a&gt;: Implemented template literal execution.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;h4 id=&#34;why-cash&#34;&gt;Why Cash?&lt;/h4&gt;

&lt;p&gt;In its very essence, Cash replaces the Windows CLI prompt (&lt;code&gt;&amp;gt;&lt;/code&gt;) with the Unix one (&lt;code&gt;$&lt;/code&gt;), the dollar symbol.&lt;/p&gt;

&lt;p&gt;Cash was most fitting in this sense:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ask and ye shall receive&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cash  
$  
````  

Cash is also a play on the word `bash`, and is actually[\[1\]](https://xkcd.com/906) a recursive acronym for Cash Shell.  

Shout out to [@aseemk](https://github.com/aseemk) for donating the name.  


#### Doesn&#39;t ShellJS do this?  

No.  

For those who don&#39;t know, [ShellJS](https://github.com/shelljs/shelljs) is an awesome Node package that implements UNIX shell commands programatically in JavaScript. Check it out - really. While ShellJS was tremendously helpful in figuring out how to accomplish Cash, the two do not really conflict.  

ShellJS gives the feel of UNIX commands in a code environment, but aims to implement the commands in a way that makes sense for a JavaScript library. This means that many commands return JavaScript objects, and some of the rougher and more dangerous edges of bash have been softened a bit.  

For example, with cash:  
```javascript  
$(&#39;ls&#39;); // &#39;node_modules\n&#39;  

$(&#39;echo foo &amp;gt; foo.txt&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With ShellJS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ls(); // [&#39;node_modules&#39;];  

echo(&#39;foo&#39;).to(&#39;foo.txt&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;team&#34;&gt;Team&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/dthree&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10319897?s=130&#34; alt=&#34;David Caccavella&#34; /&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/nfischer&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/5801521?s=130&#34; alt=&#34;Nate Fischer&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&amp;mdash;|&amp;mdash;|&amp;mdash;|&amp;mdash;|&amp;mdash;&lt;br /&gt;
&lt;a href=&#34;http://github.com/dthree&#34; target=&#34;_blank&#34;&gt;David Caccavella&lt;/a&gt; | &lt;a href=&#34;https://github.com/nfischer&#34; target=&#34;_blank&#34;&gt;Nate Fischer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to join the team? &lt;a href=&#34;mailto:threedeecee@gmail.com&#34; target=&#34;_blank&#34;&gt;Let us know&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;MIT © &lt;a href=&#34;https://github.com/dthree&#34; target=&#34;_blank&#34;&gt;David Caccavella&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>BTsync</title>
            <link>http://blog.pytool.com/tool/2016-10-22-btsync/</link>
            <pubDate>Tue, 29 Mar 2016 21:25:45 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2016-10-22-btsync/</guid>
            <description>&lt;p&gt;最近几年网上泄露、流传出来的各种数据库，已收集有70G+&lt;/p&gt;

&lt;p&gt;BtSync密钥：BHMIILA2HRJ5ZG6FN6KE7YUKBZMQOFCOA&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>autohotkey</title>
            <link>http://blog.pytool.com/tool/2010-01-01-autohotkey-/</link>
            <pubDate>Wed, 07 Jan 2015 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2010-01-01-autohotkey-/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;http://zhuanlan.zhihu.com/p/19708003&#34; target=&#34;_blank&#34;&gt;如何学习 AutoHotkey？&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://jdev.tw/blog/3704/autokey-testing&#34; target=&#34;_blank&#34;&gt;尋找Linux的AutoHotkey：Autokey差強人意&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://ahk8.com/thread-1052.html&#34; target=&#34;_blank&#34;&gt; ahk 存储数据的各种方法&lt;/a&gt;&lt;br /&gt;
[](&lt;a href=&#34;https://github.com/usi3/emacs.ahk&#34; target=&#34;_blank&#34;&gt;https://github.com/usi3/emacs.ahk&lt;/a&gt;)&lt;br /&gt;
; ! = ALT&lt;br /&gt;
; ^ = CTRL&lt;br /&gt;
; + = SHIFT&lt;br /&gt;
; # = WIN&lt;br /&gt;
;&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>awesome</title>
            <link>http://blog.pytool.com/tool/2010-01-01-awesome-/</link>
            <pubDate>Tue, 07 Oct 2014 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2010-01-01-awesome-/</guid>
            <description>&lt;p&gt;打开终端    Mod4 + Return&lt;br /&gt;
运行命令    Mod4 + F1&lt;br /&gt;
关闭当前窗口  Mod4 + Shift + c&lt;br /&gt;
重启awesome   Mod4 + Control + r&lt;br /&gt;
退出awesome   Mod4 + Shift + q&lt;br /&gt;
重绘当前窗口  Mod4 + Shift + r&lt;/p&gt;

&lt;p&gt;窗口间切换   Mod4 + j    Mod4 + k&lt;br /&gt;
标签间切换   Mod4 + Left     Mod4 + Right&lt;br /&gt;
切换到标签   Mod4 + [1-9]&lt;br /&gt;
屏幕间切换   Mod4 + Control + j  Mod4 + Control + k&lt;/p&gt;

&lt;p&gt;切换布局    Mod4 + space    Mod4 + Shift + space&lt;br /&gt;
切换为浮动窗口     Mod4 + Control + space&lt;br /&gt;
调整窗口位置  Mod4 + Shift + j    Mod4 + Shift + k&lt;br /&gt;
调整列大小   Mod4 + h    Mod4 + l&lt;br /&gt;
调整主区窗口数量    Mod4 + Shift + h    Mod4 + Shift + l&lt;br /&gt;
调整辅区窗口数量    Mod4 + Control + h  Mod4 + Control + l&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>文件同步</title>
            <link>http://blog.pytool.com/tool/2010-01-01-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/</link>
            <pubDate>Tue, 07 Oct 2014 16:46:14 CST</pubDate>
            <author>rinetd</author>
            <guid>http://blog.pytool.com/tool/2010-01-01-%E6%96%87%E4%BB%B6%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7/</guid>
            <description>&lt;ol&gt;
&lt;li&gt;BTsync&lt;/li&gt;
&lt;li&gt;Syncthing&lt;br /&gt;
&lt;a href=&#34;http://51.ruyo.net/p/2859.html&#34; target=&#34;_blank&#34;&gt;Syncthing免费开源文件同步工具 - 网络资源 - 如有乐享&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;git clone git@github.com:syncthing/syncthing /home/ubuntu/go/src/github.com/syncthing/syncthing&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;rsync&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;btsync、ownCloud，然后是seafile&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
