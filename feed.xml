<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>时光小栈 on 时光小栈</title>
        <link>//blog.pytool.com/</link>
        <language>zh-CN</language>
        <author>rinetd</author>
        <rights>Copyright (c) 2015, rinetd; all rights reserved.</rights>
        <updated>Tue, 12 Dec 2017 15:47:11 CST</updated>
        
        <item>
            <title>wepack3 url-loader</title>
            <link>//blog.pytool.com/it/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016-11-09-webpack-url-loader/</link>
            <pubDate>Tue, 12 Dec 2017 15:47:11 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016-11-09-webpack-url-loader/</guid>
            <description>&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module: {
  rules: [
    {
      test: /\.js$/,
      use: &#39;babel-loader?cacheDirectory&#39;, // 开启 babel-loader 缓存
      include: [path.resolve(&#39;src&#39;), path.resolve(&#39;test&#39;)],
      exclude: /node_modules/
    },
    {
      test: /\.(css|scss)$/,
      use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;postcss-loader&#39;, &#39;sass-loader&#39;]
    },
    {
      test: /\.(png|jpe?g|gif|svg)(\?.*)?$/i,
      loader: &#39;url-loader&#39;,
      options: {
        limit: 10 * 1024,
        name: &#39;images/[name].[ext]?[hash]&#39;
      }
    },
    {
      test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
      loader: &#39;url-loader&#39;,
      options: {
        limit: 10 * 1024,
        name: &#39;media/[name].[ext]?[hash]&#39;
      }
    },
    {
      test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
      loader: &#39;url-loader&#39;,
      options: {
        limit: 10 * 1024,
        name: &#39;fonts/[name].[ext]?[hash]&#39;
      }
    }
  ]
},
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module: {
     rules: [
         {
             // 后缀正则
             test: /\.js$/,
             // 加载器组
             use: [
                 {
                     loader: &#39;babel-loader&#39;,
                 },
                 {
                     loader: &#39;eslint-loader&#39;,
                 },
             ],
             exclude: /node_modules/,
         },
         {
             test: /\.less$/,
             use: ExtractTextPlugin.extract({
                 fallback: &#39;style-loader&#39;,
                 use: [
                     &#39;css-loader&#39;,
                     &#39;postcss-loader&#39;,
                     &#39;less-loader&#39;,
                 ],
             }),
             exclude: /node_modules/,
         },

         {
             test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/,
             use: [
                 {
                     loader: &#39;url-loader&#39;,
                     options: {
                         name: &#39;[path][name].[ext]&#39;,
                         limit: 10240,
                         mimetype: &#39;application/font-woff&#39;,
                     }
                 },
             ],
             // loaders: [&#39;url-loader?&amp;amp;limit=102400&amp;amp;mimetype=application/font-woff&#39;],
         },
         {
             test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/,
             use: [
                 {
                     loader: &#39;url-loader&#39;,
                     options: {
                         name: &#39;[path][name].[ext]&#39;,
                         limit: 10240,
                         mimetype: &#39;application/octet-stream&#39;,
                     }
                 },
             ],
             // loaders: [&#39;url-loader?name=[path][name].[ext]&amp;amp;limit=1024&amp;amp;mimetype=application/octet-stream&#39;],
         },
         {
             test: /\.eot(\?v=\d+\.\d+\.\d+)?$/,
             use: [
                 {
                     loader: &#39;file-loader&#39;,
                     options: {
                         name: &#39;[path][name].[ext]&#39;,
                     }
                 },
             ],
             // loaders: [&#39;file-loader?name=[path][name].[ext]&#39;],
         },
         {
             test: /\.svg(\?v=\d+\.\d+\.\d+)?$/,
             use: [
                 {
                     loader: &#39;url-loader&#39;,
                 },
             ],
             // loaders: [&#39;url-loader?name=[path][name].[ext]&amp;amp;limit=1024&amp;amp;mimetype=image/svg+xml&#39;],
         },
         {
             test: /\.(png|jpg|gif)$/,
             use: [
                 {
                     loader: &#39;url-loader&#39;,
                 },
             ],
             // loaders: [&#39;url-loader?name=[path][name].[ext]?[hash]&amp;amp;limit=204800000&#39;], // 单位bit
             exclude: /node_modules/,
         },
     ],
 },
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>wepack3 详解</title>
            <link>//blog.pytool.com/it/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016-11-09-webpack/</link>
            <pubDate>Tue, 12 Dec 2017 15:47:11 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/2016-11-09-webpack/</guid>
            <description>

&lt;p&gt;&lt;a href=&#34;https://doc.webpack-china.org/&#34;&gt;webpack3中文文档&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://segmentfault.com/a/1190000012068849&#34;&gt;Fis3构建迁移Webpack之路&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/fouber/blog/issues/6&#34;&gt;大公司里怎样开发和部署前端代码&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/webpack-china/awesome-webpack-cn&#34;&gt;awesome-webpack-cn&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://segmentfault.com/a/1190000005742122&#34;&gt;webpack进阶之插件篇&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://segmentfault.com/a/1190000012356915&#34;&gt;webpack飞行手册 &lt;em&gt;推荐&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;//blog.pytool.com/images/webpack.svg&#34; alt=&#34;webpack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;entry：入口，定义要打包的文件
output：出口，定义打包输出的文件；包括路径，文件名，还可能有运行时的访问路径（publicPath）参数
module: webpack将所有资源都看做是模块,而模块就需要加载器；
  loaders: Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。
plugins：定义以下额外的插件
resolve：定义能够被打包的文件，文件后缀名
    extensions: [&amp;ldquo;, &amp;lsquo;.js&amp;rsquo;, &amp;lsquo;.es6&amp;rsquo;]&lt;/p&gt;

&lt;h3 id=&#34;wenbpack-安装失败的原因&#34;&gt;wenbpack 安装失败的原因&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、网络问题    cnpm&lt;/li&gt;
&lt;li&gt;2、权限问题&lt;/li&gt;
&lt;li&gt;3、node 版本问题&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==============================================&lt;/p&gt;

&lt;h3 id=&#34;webpack版本问题修改&#34;&gt;webpack版本问题修改&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;新项目
&amp;gt;直接删除node_modules 重新安装 npm install &amp;ndash;save-dev webpack&lt;/li&gt;
&lt;li&gt;旧项目
&amp;gt;修改package.json中的版本号   删除node_modules   重新  npm install&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;===============================================&lt;/p&gt;

&lt;h3 id=&#34;学习步骤&#34;&gt;学习步骤&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;1、配置文件webpack.config.js&lt;/li&gt;
&lt;li&gt;2、entery选项（入口配置）&lt;/li&gt;
&lt;li&gt;3、output选项（出口配置）&lt;/li&gt;
&lt;li&gt;4、多入口、多出口配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==================================================&lt;/p&gt;

&lt;h3 id=&#34;基本结构&#34;&gt;基本结构&lt;/h3&gt;

&lt;p&gt;const path=require(&amp;lsquo;path&amp;rsquo;);
module.export={
    entry:{
        entry:&amp;lsquo;文件路径&amp;rsquo;
    },       入口配置
    output:{
        path：path.resolve(__dirname,&amp;lsquo;dist&amp;rsquo;),  node语法相对路径
        filename:&amp;rsquo;[name].js&amp;rsquo;    //压缩后的文件名
    },      出口配置
    module:{},      解读css  图片转换压缩
    plugins:[]      插件
    devServer:{}    配置服务
}&lt;/p&gt;

&lt;p&gt;======================================================&lt;/p&gt;

&lt;h3 id=&#34;webpack配置服务-热更新技术&#34;&gt;webpack配置服务、热更新技术&lt;/h3&gt;

&lt;p&gt;devServer:{
    contentBase:path.resolve(__dirname,&amp;lsquo;dist&amp;rsquo;),
    host:&amp;lsquo;192.168.199.106&amp;rsquo;,           //服务器地址
    compress:true,                    //服务器是否压缩
    port:1717                        //服务器端口
}&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install webpack-dev-server &amp;ndash;save-dev&lt;/li&gt;
&lt;li&gt;修改package.json&lt;/li&gt;
&lt;li&gt;&amp;ldquo;script&amp;rdquo;:{
&amp;ldquo;server&amp;rdquo;:&amp;ldquo;webpack-dev-server&amp;rdquo;
}
&amp;gt;起服务  npm run server&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;webpack3.6以上的热更新&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;=========================================================&lt;/p&gt;

&lt;h3 id=&#34;css打包&#34;&gt;css打包&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;style-loader      //处理css中URL&lt;/li&gt;
&lt;li&gt;css-loader        //对标签处理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;module:{
        rules:[
            {
                test:/.css$/,    //通过正则的方式找到处理的扩展
                //use:[&amp;lsquo;style-loader&amp;rsquo;,&amp;lsquo;css-loader]
                //loader
                //use:[{
                    loader:&amp;lsquo;style-loader&amp;rsquo;
                    },{
                        loader:&amp;lsquo;css-loader&amp;rsquo;
                }]
            }
        ]
    },&lt;/p&gt;

&lt;p&gt;================================================================&lt;/p&gt;

&lt;h3 id=&#34;js打包&#34;&gt;js打包&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;引入插件 uglify&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;const uglify = require(&amp;lsquo;uglifyjs-webpack-plugin&amp;rsquo;);&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;plugins:[
new uglify()
]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;==================================================================&lt;/p&gt;

&lt;h3 id=&#34;html打包&#34;&gt;html打包&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;安装并引入插件  html-webpack-plugin&lt;/li&gt;
&lt;li&gt;const htmlPlugin = require(&amp;lsquo;html-webpack-plugin&amp;rsquo;);&lt;/li&gt;

&lt;li&gt;&lt;p&gt;plugins:[
new  htmlPlugin({
    minify:{
        removeAttributeQuotes:true
    },
    hash:true,
    template:&amp;lsquo;./src/index.html&amp;rsquo;
})
]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;minify：是对html文件进行压缩，removeAttrubuteQuotes是却掉属性的双引号。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;hash：为了开发中js有缓存效果，所以加入hash，这样可以有效避免缓存JS。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;template：是要打包的html模版路径和文件名称。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;=====================================================================&lt;/p&gt;

&lt;h3 id=&#34;css图片路径问题&#34;&gt;css图片路径问题&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;module:[{
rules{
    test:/.(png|jpg|gif)/,
    use:[{
        loader:&amp;lsquo;url-loader&amp;rsquo;,
        options:{
            limit:50000
        }
    }]
}
}]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;test:/.(png|jpg|gif)/是匹配图片文件后缀名称。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;use：是指定使用的loader和loader的配置参数。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;limit：是把小于500000B的文件打成Base64的格式，写入JS。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;===============================================================&lt;/p&gt;

&lt;h3 id=&#34;css分离&#34;&gt;css分离&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;安装插件  extract-text-webpack-plugin&lt;/li&gt;
&lt;li&gt;引入插件&lt;/li&gt;
&lt;li&gt;在插件中声明&lt;/li&gt;
&lt;li&gt;修改处理css&lt;/li&gt;
&lt;li&gt;rules:[
{
    test:/.css$/,
    use:extractTextPlugin.extract({
        fallback:&amp;lsquo;style-loader&amp;rsquo;,
        use:&amp;lsquo;css-loader&amp;rsquo;
    })
}]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;===================================================================&lt;/p&gt;

&lt;h3 id=&#34;处理html中的图片&#34;&gt;处理html中的图片&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;安装插件  html-withimg-loader&lt;/li&gt;
&lt;li&gt;配置插件&lt;br /&gt;
&amp;gt;{
test:/.(html|htm)$/i,
use:[&amp;lsquo;html-withimg-loader&amp;rsquo;]
}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;====================================================================&lt;/p&gt;

&lt;h3 id=&#34;自动补全css前缀&#34;&gt;自动补全css前缀&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装插件  postcss-loader   autoprefixer&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;创建postcss.config.js
&amp;gt;module.exports={
plugins:[
    require(&amp;lsquo;auotprefixer&amp;rsquo;)
]
}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;编写loader
&amp;gt;{
test: /.css$/,
use: extractTextPlugin.extract({
    fallback: &amp;lsquo;style-loader&amp;rsquo;,
    use: [
        { loader: &amp;lsquo;css-loader&amp;rsquo;, options: { importLoaders: 1 } },
        &amp;lsquo;postcss-loader&amp;rsquo;
    ]
})&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;git@github.com:heavenswen/webpack-page.git&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//编译状态
const Env = process.env.NODE_ENV === &#39;production&#39;
const { join, resolve } = require(&#39;path&#39;)
const webpack = require(&#39;webpack&#39;)
const glob = require(&#39;glob&#39;)
// const ImageminPlugin = require(&#39;imagemin-webpack-plugin&#39;).default;
const HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;)
const ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;)
const CommonsChunkPlugin = require(&#39;webpack/lib/optimize/CommonsChunkPlugin&#39;)
const LiveReloadPlugin = require(&#39;webpack-livereload-plugin&#39;)
const ROOT = process.cwd();  // 根目录
// 通过允许您并行转换多个文件， HappyPack使Webpack构建更快。
const HappyPack = require(&#39;happypack&#39;);
const HappyThreadPool = HappyPack.ThreadPool({ size: (Env ? 10 : 4) });
const release = Env ? &#39;/&#39; : &#39;/&#39;//域名文件夹
//页面对应路口
const entries = {}
//入口对象集
const chunks = []
//页面list
const pagesList = []
//logo
const favicon = &amp;quot;./src/assets/img/logo.png&amp;quot;
// 页面模版
const entryHtml = []

//页面模版
glob.sync(&amp;quot;./src/pages/**/*.{ejs,html}&amp;quot;).forEach(path =&amp;gt; {
  //HtmlWebpackPlugin 不支持 .html 编译 ejs 用.ejs
  let filename = path.split(&#39;./src/pages/&#39;)[1]

  //入口js文件名
  let chunk = path.split(&#39;./src/pages/&#39;)[1].split(/\.(ejs|html)/)[0]
  //设置产出路径
  chunk = &#39;js/&#39; + chunk
  // 入口js路径
  let js = path

  //js路径
  js = js.replace(/\/pages/ig, &#39;/entry&#39;);
  js = js.replace(/\.(ejs|html)/gi, &#39;.js&#39;);
  entries[chunk] = js
  //入口js名称名称
  chunks.push(chunk)

  filename = filename.replace(/\.ejs/ig, &#39;.html&#39;)
  //获得所有页面
  pagesList.push(filename)
  let htmlConf = {
    filename: filename,//文件名
    //模版位置
    template: path,
    inject: &#39;body&#39;,
    favicon: favicon,
    hash: Env,
    env: Env,//HtmlWebpackPlugin.options.env 非打包时的处理
    list: pagesList,//页面地址
    chunks: [&#39;vendors&#39;, chunk] //chunk
  }

  //保存配置
  entryHtml.push(htmlConf)

})

const config = {
  entry: entries,
  output: {
    path: resolve(__dirname, &#39;./dist&#39;),
    filename: &#39;[name].js&#39;,
    publicPath: release
  },
  resolve: {
    //路径检索
    extensions: [&#39;.js&#39;, &#39;.vue&#39;],
    alias: {
      //资源
      assets: join(__dirname, &#39;/src/assets&#39;),
      //组件
      components: join(__dirname, &#39;/src/components&#39;),
      //视图
      views: join(__dirname, &#39;/src/views&#39;),
      root: join(__dirname, &#39;node_modules&#39;)

    }
  },
  module: {
    //忽略以下js
    noParse: /node_modules\/(jquey|zepto|moment|chart\.js)/,
    rules: [
      {
        test: /\.vue$/,
        use: &#39;vue-loader&#39;
      },
      {
        test: /\.js$/,
        use: [{
          loader: &#39;babel-loader?id=js&#39;,
          options: {
            //es6
            presets: [&#39;es2015&#39;]
          }
        }],
        exclude: /node_modules/
      },
      {
        //编译sass
        test: /\.(scss|sass)$/,
        use: ExtractTextPlugin.extract({
          fallback: &#39;style-loader?id=style&#39;,
          use: [{
            loader: &#39;css-loader?id=style&#39;,
            options: {
              //压缩css
              minimize: Env
            }
          }, &#39;postcss-loader?id=style&#39;, &#39;sass-loader?id=style&#39;],
        })

      },
      {
        test: /\.css$/,
        use: ExtractTextPlugin.extract({
          fallback: &#39;style-loader?id=style&#39;,
          use: [{
            loader: &#39;css-loader?id=style&#39;,
            options: {
              //压缩css
              minimize: Env
            }
          }, &#39;postcss-loader?id=style&#39;],
        })
      },

      {
        //修改html img路径
        test: /\.html$/,
        use: [{
          loader: &#39;html-loader&#39;,
          options: {
            root: resolve(__dirname, &#39;src&#39;),
            attrs: [&#39;img:src&#39;, &#39;img:data-src&#39;, &#39;img:data-background&#39;, &#39;link:href&#39;]
          }
        }]
      },
      {
        test: /\.(png|jpg|jpeg|gif|svg|svgz)(\?.+)?$/,
        exclude: /favicon\.(png|ico)$/,//除外
        loaders: [
          &#39;url-loader?limit=1000&amp;amp;outputPath=assets/img/&amp;amp;name=[name].[ext]?[hash]&#39;,
          {
            //图片压缩
            loader: &#39;image-webpack-loader&#39;,
            options: {
              gifsicle: {
                interlaced: false,
              },
              optipng: {
                optimizationLevel: 1,
              },
              pngquant: {
                quality: &#39;65-90&#39;,
                speed: 4
              },
              mozjpeg: {
                progressive: true,
                quality: 65
              }
            }
          }
        ]
      },
      {
        //文字资源
        test: /\.(eot|ttf|woff|woff2)(\?.+)?$/,
        use: [{
          loader: &#39;url-loader&#39;,
          options: {
            limit: 1000,
            name: &amp;quot;[name].[ext]?[hash]&amp;quot;,
            outputPath: &amp;quot;assets/fonts/&amp;quot;,//产出目录
          }
        }]
      },
      {
        //资源
        test: /\.(apk|docx|doc|exe)(\?.+)?$/,
        use: [{
          loader: &#39;file-loader&#39;,
          options: {
            name: &amp;quot;[name].[ext]?[hash]&amp;quot;,
            outputPath: &amp;quot;assets/file/&amp;quot;,//产出目录
          }
        }]
      }
    ]
  },
  plugins: [
    //会跟 webpack-dev-server 冲突，导致js修改时找不到修改对象
    // new LiveReloadPlugin({
    // }),
    new HappyPack({
      id: &#39;js&#39;,
      // @see https://github.com/amireh/happypack
      threadPool: HappyThreadPool,
      loaders: [&#39;babel-loader&#39;]
    }),
    new HappyPack({
      id: &#39;styles&#39;,
      threadPool: HappyThreadPool,
      loaders: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;postcss-loader&#39;, &#39;sass-loader&#39;]
    }),
    //获取公用模块生成js
    new CommonsChunkPlugin({
      name: &#39;vendors&#39;,
      filename: &#39;assets/js/vendors.js?[hash]&#39;,
      chunks: chunks,
      minChunks: chunks.length
    }),
    //提取公用模块生成css
    new ExtractTextPlugin({
      filename: (getPath) =&amp;gt; {
        //获得地址
        let name = getPath(&#39;[name]&#39;)

        if (!name.match(/vendors/ig)) {
          let arr = name.split(&#39;/&#39;)
          name = arr[arr.length - 1]//获得文件名
        }
        return &#39;assets/css/&#39; + name + &#39;.css&#39;;
      },
      allChunks: true
    }),
    //webpack3.0
    new webpack.optimize.ModuleConcatenationPlugin()
  ],
  devServer: {
    contentBase: [
      join(ROOT, &#39;src/&#39;)
    ],
    port: 8010,
    //启动路由功能
    //historyApiFallback: false,
    // noInfo: true,
    hot: false,
    //真实地址 可以用局域访问
    disableHostCheck: true,
    //允许其他电脑访问
    host: &#39;0.0.0.0&#39;,
  },
  devtool: &#39;#eval-source-map&#39;
}


//页面模版
entryHtml.forEach(function (v) {
  config.plugins.push(new HtmlWebpackPlugin(v));
});

module.exports = config

if (process.env.NODE_ENV === &#39;production&#39;) {
  module.exports.devtool = &#39;#source-map&#39;
  // http://vue-loader.vuejs.org/en/workflow/production.html
  module.exports.plugins = (module.exports.plugins || []).concat([
    new webpack.DefinePlugin({
      &#39;process.env&#39;: {
        NODE_ENV: &#39;&amp;quot;production&amp;quot;&#39;
      }
    }),
    //压缩单元
    new webpack.optimize.UglifyJsPlugin({
      // 最紧凑的输出
      beautify: false,
      // 删除所有的注释
      comments: false,
      compress: {
        // 在UglifyJs删除没有用到的代码时不输出警告  
        warnings: false,
        // 删除所有的 `console` 语句
        // 还可以兼容ie浏览器
        drop_console: true,
        // 内嵌定义了但是只用到一次的变量
        collapse_vars: true,
        // 提取出出现多次但是没有定义成变量去引用的静态值
        reduce_vars: true,
      }
    }),

  ])
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var path = require(&#39;path&#39;);
var fs = require(&#39;fs&#39;);
var webpack = require(&#39;webpack&#39;);
var HtmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);
var ExtractTextPlugin = require(&#39;extract-text-webpack-plugin&#39;);
var FriendlyErrorsWebpackPlugin = require(&#39;friendly-errors-webpack-plugin&#39;);

console.log(&#39;NODE_ENV&#39;,process.env.NODE_ENV);

const extractCSS = new ExtractTextPlugin(&#39;css/[name]-one.css&#39;);
const extractLESS = new ExtractTextPlugin(&#39;css/[name]-two.css&#39;);
const extractSASS = new ExtractTextPlugin(&#39;css/[name]-three.css&#39;);

var config = {
    entry: {
        main: [
            // &#39;babel-polyfill&#39;,
            &#39;webpack-hot-middleware/client?path=/__webpack_hmr&amp;amp;timeout=20000&amp;amp;reload=true&#39;,
            &#39;webpack/hot/dev-server&#39;,
            path.resolve(__dirname, &#39;src/main.js&#39;),
            path.resolve(__dirname, &#39;src/index.js&#39;)
        ],
        verdor: [
            path.resolve(__dirname, &#39;src/verdor/verdor.js&#39;),
        ]
    },
    // entry: path.resolve(__filename, &#39;../src/main.js&#39;),
    output: {
        path: path.resolve(__filename, &#39;../dist&#39;),
        publicPath: &#39;/&#39;,
        filename: &#39;[name].[hash:8].bundle.js&#39;,
        // webpack 允许你根据文件内容生成哈希值，只要用 [chunkhash] 替换 [hash] 就可以了
        // 不要在开发环境下使用 [chunkhash]，因为这会增加编译时间。将开发和生产模式的配置分开，并在开发模式中使用 [name].js 的文件名， 在生产模式中使用 [name].[chunkhash].js 文件名。
        //    publicPath: &#39;/&#39;,
        //    chunkFilename: &#39;[id].[chunkhash].js&#39;
    },
    // 生成.map文件
    // devtool: &#39;source-map&#39;,
    module: {
        rules: [
            // 加载JSON文件 使用json-loader webpack1
            // wenpack2 + ,json-loader 不再需要手动添加
            // [官方: 是为了消除 webpack、 node.js 和 browserify 之间的环境差异。 https://github.com/webpack/webpack/issues/3363]
            // {
            //     test: /\.json$/,
            //     use: &#39;json-loader&#39;
            // },

            // 处理 .json5结尾的文件
            {
                test: /\.json5$/,
                use: &#39;json5-loader&#39;
            },
            // {
            //     test: /\.css$/,
            //     // 使用①生成的css文件 插入到html中
            //     // use: [ &#39;style-loader&#39;, &#39;css-loader&#39; ]
            //     // 使用②ExtractTextPlugin 生成style.css文件
            //     // 在主入口文件中import
            //     use: ExtractCSS.extract([
            //         &#39;css-loader&#39;,
            //         // &#39;px2rem2-loader&#39;,
            //         &#39;postcss-loader&#39;,
            //     ]),
            // }

            // 使用postcss方式， css 插入到DOM形式 ， 支持热更新
            // {
            //     test: /\.css$/,
            //     use: [ &#39;style-loader&#39;, &#39;css-loader&#39;,  &#39;postcss-loader&#39; ]
            // },
            {
                test: /\.less$/,
                use: extractLESS.extract({
                    fallback: [&#39;style-loader&#39;],
                    use: [
                        &#39;css-loader&#39;,
                        &#39;postcss-loader&#39;,
                        &#39;less-loader&#39;
                    ]
                })
            },
            {
                test: /\.scss$/,
                use: extractSASS.extract({
                    fallback: [&#39;style-loader&#39;],
                    use: [
                        &#39;css-loader&#39;,
                        &#39;postcss-loader&#39;,
                        &#39;sass-loader&#39;
                    ]
                })
            },
            // ExtractTextPlugin 提取了样式出来， 官方说No Hot Module Replacement。
            // https://github.com/webpack-contrib/extract-text-webpack-plugin/blob/webpack-1/README.md
            {
                test: /\.css$/,
                use: extractCSS.extract({
                    fallback: [&#39;style-loader&#39;],
                    use: [
                        &#39;css-loader&#39;,
                        &#39;postcss-loader&#39;
                    ]
                })
            },
            {
                test: /\.js(x)*$/,
                exclude: /node_modules/,
                loader: &#39;babel-loader&#39;
            },
            {
                test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
                loader: &#39;url-loader&#39;,
                options: {
                    limit: 8000,
                    name: &#39;image/[name].[hash:7].[ext]&#39;
                }
            },
            {
                test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
                loader: &#39;url-loader&#39;,
                options: {
                    limit: 8000,
                    name: &#39;font/[name].[hash:7].[ext]&#39;
                }
            },
            // 手写一个简单的webpack loader
            // 处理 .huangyb 后缀的文件
            {
                test: /\.huangyb$/,
                loader: &#39;huangyb-loader&#39;
            }
        ]
    },
    plugins: [
        // 生成html文件，里面的JS文件 src 地址自动添加hash
        new HtmlWebpackPlugin({
            title: &#39;huangyb&#39;,
            favicon: &#39;./src/image/logoNew.gif&#39;,
            filename: &#39;index.html&#39;,
            minify:{
                removeComments: true, // 删除注释
                collapseWhitespace: true // 删除空格
            }
        }),
        // CSS生成单独的文件
        // new ExtractTextPlugin({
        //     filename: &#39;css/[name][hash:8].css&#39;,
        //     allChunks: true,
        //     disable: false
        // })

        extractCSS,
        extractLESS,
        extractSASS,

        // 用来跳过编译时出错的代码并记录，使编译后运行时的包不会发生错误
        // * webpack3 NoEmitOnErrorsPlugin 已经 取代webpack 2 的 NoErrorsPlugin
        new webpack.NoEmitOnErrorsPlugin(),
        new FriendlyErrorsWebpackPlugin(), // 终端显示

        new webpack.optimize.CommonsChunkPlugin({ // 提取公用JS代码插件
            names: [&#39;vendor&#39;],
            // ( 公共chunk(commnons chunk) 的名称)
            filename: &#39;commons.js&#39;,
            // ( 公共chunk 的文件名)
            minChunks: 3
            // (模块必须被3个 入口chunk 共享)
            // CommonsChunkPlugin 可以通过传参minChunks来控制你希望重复出现几次的module 被提取出来打包。
            // 也就是说你自己可以控制当一个模块被引入几次可以被打包到共用的chunk中，还可以规定如果这个公共模块小于一个值 minSize，
            // 就不被提取出来这些都可以帮助你控制你想要的粒度。当你改的不是公共模块的代码，理论上webpack 打包的时候本来就不会影响其他代码。
            // chunks: [&#39;pageA&#39;, &#39;pageB&#39;],
            // (只使用这些 入口chunk)
        }),

        // OccurrenceOrderPlugin 现在默认启用，并已重命名（在 webpack 1 中为 OccurenceOrderPlugin）。 因此，请确保从您的配置中删除该插件：
        // OccurrenceOrderPlugin is now on by default
        // new webpack.optimize.OccurrenceOrderPlugin(),
        new webpack.HotModuleReplacementPlugin()
    ]
    // resolve: {
    //     alias: {
    //         huangImg: path.resolve(__dirname, &#39;src/image/&#39;)
    //     }
    // }
}

module.exports = config;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/*
 * @Author: ignaciozhu
 * @Date: 2017-05-03 16:32:21
 * @Last Modified by: ignaciozhu
 * @Last Modified time: 2017-06-02 11:50:06
 */
//配置本地反向代理文件夹所在路径
const DIST = &#39;../../../ya/client_html/branch/nginx-1.10.1/&#39;;
const path = require(&#39;path&#39;)
const webpack = require(&#39;webpack&#39;)
const HtmlWebpackPlugin = require(&amp;quot;html-webpack-plugin&amp;quot;) //自动生成一个html 引入打包之后的js
const ExtractTextPlugin = require(&amp;quot;extract-text-webpack-plugin&amp;quot;) //默认打包css 这些全部在js 里面  用这个可以分离出来 单独生成css文件  //生产环节会用到
const OpenBrowserPlugin = require(&#39;open-browser-webpack-plugin&#39;) //打包完成自动打开浏览器
const CopyWebpackPlugin = require(&#39;copy-webpack-plugin&#39;) //拷贝文件  当有第三方依赖可以copy到打包文件夹中
const autoprefixer = require(&#39;autoprefixer&#39;) //自动加前缀
const CptimizeCssAssetsPlugin = require(&#39;optimize-css-assets-webpack-plugin&#39;) //压缩css
const ImageminPlugin = require(&#39;imagemin-webpack-plugin&#39;).default //压缩图片
const { BundleAnalyzerPlugin } = require(&#39;webpack-bundle-analyzer&#39;) //生成打包图
const UglifyJSPlugin = require(&#39;uglifyjs-webpack-plugin&#39;); //webpack3 单独分离出来了这个压缩的

const { host, dev_port } = require(&amp;quot;./config&amp;quot;)
const { delhttp } = require(&#39;./server/utils/method.js&#39;)

module.exports = (env) =&amp;gt; {
  //env 是npm script 运行webpack时传进来的  判断是否是开发环境
  const mode = (env &amp;amp;&amp;amp; env.mode) || &amp;quot;DEV&amp;quot;

  const options = {
      //开发工具
      devtool: mode === &amp;quot;DEV&amp;quot; ? &amp;quot;source-map&amp;quot; : false,

      //开发服务器
      devServer: {
        contentBase: path.resolve(__dirname, &amp;quot;dist&amp;quot;), //静态资源根目录
        compress: true, //压缩
        port: dev_port, //端口
        host: delhttp(host),
        hot: true, //热更新
        inline: true, //iframe 模式
        historyApiFallback: true, //浏览器 history
        stats: { //统计
          color: true, //输出有颜色的信息
          errors: true, //显示错误信息
          version: true, //显示版本号
          warnings: true, //显示警告
          progress: true, //显示进度,
          timings: true, //显示时间
        }
      },

      //入口
      entry: mode === &amp;quot;DEV&amp;quot; ? [
        &amp;quot;react-hot-loader/patch&amp;quot;, //热更新
        `webpack-dev-server/client?${host}:${dev_port}`,
        &amp;quot;webpack/hot/only-dev-server&amp;quot;,
        path.resolve(__dirname, &amp;quot;src/index.js&amp;quot;),
      ] : {
        app: path.resolve(__dirname, &amp;quot;src/index.js&amp;quot;),
        // vendor:[&#39;react&#39;]
      },

      //打包输出
      output: {
        path: path.resolve(__dirname, DIST + &amp;quot;dist&amp;quot;), ///myblog
        filename: mode === &amp;quot;DEV&amp;quot; ? &amp;quot;js/[name].js&amp;quot; : &amp;quot;./js/[name].[chunkhash:8].js&amp;quot;,
        chunkFilename: mode === &amp;quot;DEV&amp;quot; ? &amp;quot;js/[name]Chunk.js&amp;quot; : &amp;quot;./js/[name]Chunk.[chunkhash:8].js&amp;quot;,
        publicPath: mode === &amp;quot;DEV&amp;quot; ? `${host}:${dev_port}/` : &amp;quot;/&amp;quot; //myblog/
      },

      //模块加载器
      module: {
        rules: [{
          test: /\.js[x]?$/,
          use: [{
            loader: &amp;quot;babel-loader&amp;quot;
          }],
          exclude: &amp;quot;/node_modules/&amp;quot;,
          use: [
            // {loader:&#39;react-hot-loader&#39;},
            {
              loader: &amp;quot;babel-loader&amp;quot;,
              options: {
                //按需加载模块，antd...
                plugins: [
                  [&amp;quot;import&amp;quot;, [{
                    &amp;quot;libraryName&amp;quot;: &amp;quot;antd&amp;quot;,
                    &amp;quot;libraryDirectory&amp;quot;: &amp;quot;lib&amp;quot;,
                    &amp;quot;style&amp;quot;: true
                  }, {
                    &amp;quot;libraryName&amp;quot;: &amp;quot;antd-mobile&amp;quot;,
                    &amp;quot;libraryDirectory&amp;quot;: &amp;quot;component&amp;quot;,
                  }, ]],
                  // &amp;quot;transform-decorators-legacy&amp;quot;,
                  // &amp;quot;transform-class-properties&amp;quot;
                ]
              }
            },
          ],
          include: [path.resolve(&amp;quot;src&amp;quot;)] //只遍历src目录下的
        }, {
          test: /\.less$/,
          use: mode === &amp;quot;DEV&amp;quot; //开发环境 css打包到js中
            ? [
              { loader: &amp;quot;style-loader&amp;quot; }, //loader 倒序执行  先执行 less-laoder
              { loader: &amp;quot;css-loader&amp;quot;, options: { minimize: false, sourceMap: true } },
              { loader: &amp;quot;postcss-loader&amp;quot; }, //自动加前缀
              { loader: &amp;quot;less-loader&amp;quot;, options: { sourceMap: true } }
            ] : ExtractTextPlugin.extract({ //生产环境 把css单独分离出来
              fallback: &amp;quot;style-loader&amp;quot;,
              use: [
                &amp;quot;css-loader&amp;quot;,
                &amp;quot;postcss-loader&amp;quot;, {
                  loader: &amp;quot;less-loader&amp;quot;,
                  options: {
                    sourceMap: false,
                  },
                },
              ],
            })
        }, {
          test: /\.css$/,
          use: mode === &amp;quot;DEV&amp;quot; ? [
            { loader: &amp;quot;style-loader&amp;quot; }, //loader 倒序执行  先执行 less-laoder
            { loader: &amp;quot;css-loader&amp;quot;, options: { minimize: false, sourceMap: true } },
            { loader: &amp;quot;postcss-loader&amp;quot; }
          ] : ExtractTextPlugin.extract({
            fallback: &amp;quot;style-loader&amp;quot;,
            use: [
              &amp;quot;css-loader&amp;quot;,
              &amp;quot;postcss-loader&amp;quot;, {
                loader: &amp;quot;less-loader&amp;quot;,
                options: {
                  sourceMap: false
                },
              },
            ],
          })
        }, {
          test: /\.(jpg|jpeg|png|gif|cur|ico)$/,
          use: [{
            loader: &#39;file-loader&#39;,
            options: {
              name: &amp;quot;images/[name][hash:8].[ext]&amp;quot; //遇到图片  生成一个images文件夹  名字.后缀的图片
            }
          }]
        }, {
          test: /\.(eot|ttf|svg|woff|woff2)$/,
          use: [{
            loader: &amp;quot;file-loader&amp;quot;,
            options: {
              name: &amp;quot;fonts/[name][hash:8].[ext]&amp;quot;,
            },
          }, ],
        }, ]
      },

      //自动补全后缀
      resolve: {
        enforceExtension: false, //2.0 后 不能写 extensions :[&amp;quot;&amp;quot;]
        extensions: [&#39;.js&#39;, &#39;.jsx&#39;, &#39;.json&#39;], //比如 test.js   可以写成 require(&#39;test&#39;)
        alias: {
          // Support React Native Web
          // https://www.smashingmagazine.com/2016/08/a-glimpse-into-the-future-with-react-native-for-web/
          &#39;react-native&#39;: &#39;react-native-web&#39;,
          components: path.resolve(__dirname) + &#39;/src/common/components&#39;,
          /* container: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/container&#39;,
           images: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/images&#39;,
           pages: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/pages&#39;,
           utils: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/utils&#39;,
           data: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/server/data&#39;,
           actions: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/actions&#39;,
           reducers: path.resolve(__dirname, &#39;..&#39;) + &#39;/src/common/reducers&#39;,*/
        },
        modules: [
          path.resolve(&amp;quot;src&amp;quot;), //比如 src/app/components/xx  可以写成 app/components/xx
          path.resolve(&amp;quot;.&amp;quot;),
          path.resolve(&amp;quot;src/shared&amp;quot;),
          &amp;quot;node_modules&amp;quot;,
        ],
      },

      //插件
      plugins: []
    }
    //根据开发环境不同  concat 不同的插件
  if (mode === &amp;quot;DEV&amp;quot;) {
    options.plugins = options.plugins.concat([
      new webpack.NamedModulesPlugin(), //打印更具可读性模块名称在浏览器控制台
      new webpack.NoEmitOnErrorsPlugin(), //错误不打断
      new webpack.DefinePlugin({ //调试
        __DEBUG__: true,
      }),
      new webpack.HotModuleReplacementPlugin(), //热加载插件  
      /*      new OpenBrowserPlugin({ //编译完成打开浏览器
              url: `${host}:${dev_port}`
            })*/
    ])
  } else {
    options.plugins = options.plugins.concat([
      // new BundleAnalyzerPlugin(),     //生成打包图
      // //webpackv3.0新增 作用域提升 默认是闭包式打包 浏览器执行速度变慢
      // //开启这个去掉模块的包裹函数,体积更小
      // new webpack.optimize.ModuleConcatenationPlugin(),
      new webpack.DefinePlugin({
        &amp;quot;process.env.NODE_ENV&amp;quot;: JSON.stringify(&amp;quot;production&amp;quot;),
        __DEBUG__: false,
      }),
      new UglifyJSPlugin({ //压缩
        output: {
          comments: false //移除所有注释
        },
        compress: {
          warnings: false
        }
      }),
      new ExtractTextPlugin({ // 将打包文件中的css分离成一个单独的css文件
        filename: &#39;css/app.[contenthash:8].css&#39;,
        allChunks: true
      }),
      //[1]
      //找到所有node_modules的依赖包  分离出来
      // /axios/ 没有用到的模块
      new webpack.optimize.CommonsChunkPlugin({
        name: &amp;quot;app&amp;quot;,
        async: &amp;quot;common-in-lazy&amp;quot;,
        children: true,
        minChunks: ({ resource } = {}) =&amp;gt; (
          resource &amp;amp;&amp;amp;
          resource.includes(&#39;node_modules&#39;) &amp;amp;&amp;amp;
          /axios/.test(resource)
        )
      }),
      // [2]
      //找到模块次数使用两次的  分离出来
      //单独打成used-twice.js 减少包的体积
      /**
       * 升级到 v2.6 貌似async不起作用  article admin detail 都使用了但是moment都打包进了对应的chunk文件
       * 导致文件增大了600kb
       * 经过github上的提问 各路大神的帮助下  解决了上面这个问题 需要设置name!!!!!!!!!!!
       */
      new webpack.optimize.CommonsChunkPlugin({
        name: &amp;quot;app&amp;quot;,
        children: true,
        async: &#39;used-twice&#39;,
        minChunks: (module, count) =&amp;gt; (
          count &amp;gt;= 2
        ),
      }),
      //[3]
      //[1][2][3] 是按需加载 大幅减少打包js体积的关键
      //遍历node_modules目录 以.js结尾 一道vender chunk
      //自动化分离第三方依赖
      new webpack.optimize.CommonsChunkPlugin({
        name: &#39;app&#39;,
        filename: &amp;quot;js/common.[chunkhash:8].js&amp;quot;,
        minChunks: ({ resource }) =&amp;gt; (
          resource &amp;amp;&amp;amp;
          resource.indexOf(&#39;node_modules&#39;) &amp;gt;= 0 &amp;amp;&amp;amp;
          resource.match(/\.js$/)
        )
      }),
      new webpack.LoaderOptionsPlugin({ //laoder最小化
        minimize: true
      }),
      //图片压缩没用。。。什么鬼
      new ImageminPlugin({
        // disable:false,
        test: /\.(jpe?g|png|gif|svg)$/i,
        optipng: {
          optimizationLevel: 7
        }
      }),
      new CptimizeCssAssetsPlugin({ //压缩css  与 ExtractTextPlugin 配合使用
        cssProcessor: require(&#39;cssnano&#39;),
        cssProcessorOptions: { discardComments: { removeAll: true } }, //移除所有注释
        canPrint: true //是否向控制台打印消息
      })
    ])
  }
  options.plugins.push(
    new HtmlWebpackPlugin({
      title: &amp;quot;西溪泊岸共享&amp;quot;,
      filename: &amp;quot;index.html&amp;quot;, //自动把打包的js文件引入进去
      template: path.resolve(__dirname, &amp;quot;src/index.html&amp;quot;), //模板文件
      hash: true, //添加hash码
      inject: true //注射所有资源到 body元素的底部     &amp;quot;head&amp;quot; &amp;quot;body&amp;quot; true false  &amp;quot;body&amp;quot; == true
    })
  )
  return options
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Makefile 详解</title>
            <link>//blog.pytool.com/it/shell/makefile/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/makefile/</guid>
            <description>

&lt;h2 id=&#34;基本原则&#34;&gt;基本原则&lt;/h2&gt;

&lt;p&gt;.PYTHON伪目标总是不如其它文件“新”，因此它总是被执行。
@   使命令在被执行前不被回显。
–   使任何命令行的任何非零退出状态都被忽略。
+   使命令行可以通过指定 -n、-q 或 -t 选项来执行。&lt;/p&gt;

&lt;h2 id=&#34;模式变量&#34;&gt;模式变量 %&lt;/h2&gt;

&lt;p&gt;argets定义了一系列的目标文件，可以有通配符。是目标的一个集合。
target-parrtern是指明了targets的模式，也就是的目标集模式。
prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。&lt;/p&gt;

&lt;p&gt;这样描述这三个东西，可能还是没有说清楚，还是举个例子来说明一下吧。
如果我们的&lt;target-parrtern&gt;定义成“%.o”，意思是我们的集合中都是以“.o”结尾的，而如果我们的&lt;prereq-parrterns&gt;定义成“%.c”，意思是对&lt;target-parrtern&gt;所形成的目标集进行二次定义，其计算方法是，取&lt;target-parrtern&gt;模式中的“%”（也就是去掉了[.o]这个结尾），并为其加上[.c]这个结尾，形成的新集合。&lt;/p&gt;

&lt;p&gt;所以，我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”那么你可以使用反斜杠“\”进行转义，来标明真实的“%”字符。&lt;/p&gt;

&lt;p&gt;看一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;objects = foo.o bar.o
all: $(objects)
$(objects):
%.o: %.c
  $(CC) -c $(CFLAGS) $&amp;lt; -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，
也就是“foo.o bar.o”，也就是变量$object集合的模式，而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foobar”，并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.cbar.c”。
而命令中的“$&amp;lt;”和“$@”则是自动化变量，“$&amp;lt;”表示所有的依赖目标集（也就是“foo.c bar.c”），“$@”表示目标集（也就是foo.o bar.o”）。于是，上面的规则展开后等价于下面的规则：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Ｍakefile&#34;&gt;foo.o : foo.c
  $(CC) -c $(CFLAGS) foo.c -o foo.o
bar.o : bar.c
  $(CC) -c $(CFLAGS) bar.c -o bar.o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;试想，如果我们的“%.o”有几百个，那种我们只要用这种很简单的“静态模式规则”就可以写完一堆规则，实在是太有效率了。“静态模式规则”的用法很灵活，如果用得好，那会一个很强大的功能。再看一个例子：&lt;/p&gt;

&lt;p&gt;files = foo.elc bar.o lose.o&lt;/p&gt;

&lt;p&gt;$(filter %.o,$(files)): %.o: %.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       $(CC) -c $(CFLAGS) $&amp;lt; -o $@
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$(filter %.elc,$(files)): %.elc: %.el&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;       emacs -f batch-byte-compile $&amp;lt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;$(filter%.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。其的它内容，我就不用多说了吧。这个例字展示了Makefile中更大的弹性。&lt;/p&gt;

&lt;h2 id=&#34;自动变量&#34;&gt;自动变量 $&lt;/h2&gt;

&lt;p&gt;$@          &amp;ndash;代表目标文件(target)
$^          &amp;ndash;代表所有的依赖文件(components)
$&amp;lt;          &amp;ndash;代表第一个依赖文件(components中最左边的那个)。&lt;/p&gt;

&lt;p&gt;要生成目标 &amp;hellip; : 生成目标所需的依赖 &amp;hellip;
    command #必须要以[Tab]键开始&lt;/p&gt;

&lt;p&gt;export&lt;unexport&gt; 传递变量到下级 Makefile 中&lt;/p&gt;

&lt;p&gt;$@
表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，&amp;rdquo;$@&amp;ldquo;就是匹配于
目标中模式定义的集合。
  $% 仅匹配目标文件
仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是&amp;rdquo;foo.a
(bar.o)&amp;ldquo;，那么，&amp;rdquo;$%&amp;ldquo;就是&amp;rdquo;bar.o&amp;rdquo;，&amp;rdquo;$@&amp;ldquo;就是&amp;rdquo;foo.a&amp;rdquo;。如果目标不是函数库文件（Unix
下是[.a]，Windows 下是[.lib]），那么，其值为空。
  $&amp;lt;
依赖目标中的第一个目标名字。如果依赖目标是以模式（ 即&amp;rdquo;%&amp;ldquo;）定义的，那么&amp;rdquo;$&amp;lt;&amp;ldquo;将
是符合模式的一系列的文件集。注意，其是一个一个取出来的。
  $? 依赖的集合(只提取比目标新的)
所有比目标新的依赖目标的集合。以空格分隔。
  $^ 依赖的集合(去重)
所有的依赖目标的集合。以空格分隔。如果在依赖目标中有多个重复的，那个这个变量
会去除重复的依赖目标，只保留一份。
  $+ 依赖的集合(不去重)
这个变量很像&amp;rdquo;$^&amp;ldquo;，也是所有依赖目标的集合。只是它不去除重复的依赖目标。
  $* 去除后缀名(不推荐使用)
这个变量表示目标模式中&amp;rdquo;%&amp;ldquo;及其之前的部分。如果目标是&amp;rdquo;dir/a.foo.b&amp;rdquo;，并且目标的
模式是&amp;rdquo;a.%.b&amp;rdquo;，那么，&amp;rdquo;$&lt;em&gt;&amp;ldquo;的值就是&amp;rdquo;dir/a.foo&amp;rdquo;。这个变量对于构造有关联的文件名是比
较有较。如果目标中没有模式的定义，那么&amp;rdquo;$&lt;/em&gt;&amp;ldquo;也就不能被推导出，但是，如果目标文件的
后缀是 make 所识别的，那么&amp;rdquo;$&lt;em&gt;&amp;ldquo;就是除了后缀的那一部分。例如：如果目标是&amp;rdquo;foo.c&amp;rdquo;，因
为&amp;rdquo;.c&amp;rdquo;是 make 所能识别的后缀名，所以，&amp;rdquo;$&lt;/em&gt;&amp;ldquo;的值就是&amp;rdquo;foo&amp;rdquo;。这个特性是 GNU make 的，&lt;/p&gt;

&lt;p&gt;很有可能不兼容于其它版本的 make，所以，你应该尽量避免使用&amp;rdquo;$&lt;em&gt;&amp;ldquo;，除非是在隐含规则
或是静态模式中。如果目标中的后缀是 make 所不能识别的，那么&amp;rdquo;$&lt;/em&gt;&amp;ldquo;就是空值。&lt;/p&gt;

&lt;p&gt;在Makefile中写shell代码有点诡异，和不同的shell语法不太一样，如果不了解，看Makefile会莫名其妙。下面总结了一些。&lt;/p&gt;

&lt;h2 id=&#34;makefile和shell&#34;&gt;Makefile和Shell&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Makefile本质上来讲也是shell脚本，即每条command都是shell进程，运行完shell进程都会退出
&lt;code&gt;Makefile
test:
gcc -c main.c -o main.o
gcc -c a.c -o a.o
&lt;/code&gt;
这样输入make test，结果相当于两个进程，都退出了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;等价于在shell下输命令一样。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;my_test:
  cd /home;mkdir test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里make my_test，结果相当于一个进程。当前目录是/root 而&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;own_test:
  cd /home
  mkdir test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时&lt;code&gt;make own_test&lt;/code&gt;，相当于两个进程，
第一个进程是cd /home,运行完回到了/root。这时再运行第二个shell命令就会在/root下创建一个test目录.(makefile中的shell进程命令，跟直接在shell输的命令相同，但是它都会结束本身，即exit)&lt;/p&gt;

&lt;h2 id=&#34;makefile-中变量赋值&#34;&gt;Makefile 中变量赋值&lt;/h2&gt;

&lt;p&gt;1：尽在Makefile文件的目标项冒号后的另起一行的代码才是shell代码。&lt;/p&gt;

&lt;p&gt;第一种方式：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xx = xx1&lt;/code&gt;         // 这里时makefile代码&lt;/p&gt;

&lt;p&gt;第二种方式：
yy：xx = xx2       // 这是是makefile代码，makefile允许变量赋值时，&amp;rsquo;=&amp;lsquo;号两边留空格  ？？？？？？可以吗&lt;/p&gt;

&lt;p&gt;第三种方式：
yy：
   xx=xx3         // 只有这里是shell代码 ，shell不允许‘=’号两边有空格哦。
yy:
   xx= xx3        // 只有这里是shell代码 ，shell不允许‘=’号两边有空格哦。&lt;/p&gt;

&lt;p&gt;注意此时xx的值是&amp;rdquo; xx3&amp;rdquo;，多了一个空格&lt;/p&gt;

&lt;p&gt;有一个例外：
xx=$(shell 这里的代码也是shell代码)&lt;/p&gt;

&lt;h2 id=&#34;变量传递&#34;&gt;变量传递&lt;/h2&gt;

&lt;p&gt;2：Makefile中的shell，每一行是一个进程，不同行之间变量值不能传递。所以，Makefile中的shell不管多长也要写在一行。
eg：&lt;/p&gt;

&lt;p&gt;SUBDIR=src example&lt;/p&gt;

&lt;p&gt;all:&lt;/p&gt;

&lt;p&gt;@for subdir in $(SUBDIR); /      // 这里往下是一行shell&lt;/p&gt;

&lt;p&gt;do/&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   echo &amp;quot;building &amp;quot; $$subdir; /
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;done&lt;/p&gt;

&lt;h2 id=&#34;变量引用-ｍakefile变量-shell的变量&#34;&gt;变量引用 Ｍakefile变量$ shell的变量$$&lt;/h2&gt;

&lt;p&gt;3：Makefile中的变量以$开头，使用$(VAR)或${VAR}来引用变量的定义。 所以，为了避免和shell的变量冲突，shell的变量以$$开头&lt;/p&gt;

&lt;p&gt;注意：Makefile中在对一些简单变量的引用，我们也可以不使用“（）”和“{}”来标记变量名，而直接使用“$x”的格式来实现，此种用法仅限于变量名为单字符的情况。另外自动化变量也使用这种格式。对于一般多字符变量的引用必须使用括号了标记，否则make将把变量名的首字母作为作为变量而不是整个字符串（“$PATH”在Makefile中实际上是“$(P)ATH”）。这一点和shell中变量的引用方式不同。shell中变量的引用可以是“${xx}”或者“$xx”格式。但在Makefile中多字符变量名的引用只能是“$(xx)”或者“${xx}”格式。&lt;/p&gt;

&lt;p&gt;eg1：从当前目录路径中提取出 /application 或 /base_class 之前的部分
PROJECT_ROOT_DIR = $(shell pwd | awk -F&amp;rsquo;/application|/base_class&amp;rsquo; &amp;lsquo;{print $$1}&amp;rsquo;)
eg2：上例中$$subdir就是shell中的变量， 而$(SUBDIR)是Makefile的中的变量&lt;/p&gt;

&lt;h2 id=&#34;变量输出-隐藏自身的输出-出错继续运行&#34;&gt;变量输出 @隐藏自身的输出 - 出错继续运行&lt;/h2&gt;

&lt;p&gt;如果make执行的命令前面加了@字符，则不显示命令本身而只显示它的结果; Android中会定义某个变量等于@，例如 hide:= @
通常make执行的命令如果出错（该命令的退出状态非0）就立刻终止，不再执行后续命令，但如果命令前面加了-号，即使这条命令出错，make也会继续执行后续命令。
通常rm命令和mkdir命令前面要加-号，因为rm要删除的文件可能不存在，mkdir要创建的目录可能已存在，这两个命令都有可能出错，但这种错误是应该忽略的。&lt;/p&gt;

&lt;p&gt;1、在Makefile中只能在target中调用Shell脚本，其他地方是不能输出的。比如如下代码就是没有任何输出：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VAR=&amp;quot;Hello&amp;quot;
echo &amp;quot;$(VAR)&amp;quot;

all:
  .....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码任何时候都不会输出，没有在target内，如果上述代码改为如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;VAR=&amp;quot;Hello&amp;quot;

all:
   echo &amp;quot;$(VAR)&amp;quot;
   .....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码，在make all的时候将会执行echo命令。&lt;/p&gt;

&lt;p&gt;最后打印结果是:
echo &amp;ldquo;&amp;ldquo;Hello&amp;rdquo;&amp;rdquo;
&amp;ldquo;Hello&amp;rdquo;&lt;/p&gt;

&lt;p&gt;2、在Makefile中执行shell命令，一行创建一个进程来执行。这也是为什么很多Makefile中有很多行的末尾都是“;  \”，以此来保证代码是一行而不是多行，这样Makefile可以在一个进程中执行，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SUBDIR=src example
all:
   @for subdir in $(SUBDIR); \
   do\
       echo &amp;quot;building &amp;quot;; \
   done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上述可以看出for循环中每行都是以”; \”结尾的。&lt;/p&gt;

&lt;p&gt;3、Makefile中所有以$打头的单词都会被解释成Makefile中的变量。如果你需要调用shell中的变量（或者正则表达式中锚定句位$），都需要加两个$符号（$$）。实例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;/data/&amp;quot;

all:
   echo ${PATH}/*Makefile中变量，即&amp;quot;/data&amp;quot;*/
   echo $$PATH /*shell中的变量*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;例子中的第一个${PATH}引用的是Makefile中的变量，而不是shell中的PATH环境变量，后者引用的事Shell中的PATH环境变量。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;以上三点的是Makefile调用shell应该注意的地方，写Makefile一定要注意。
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Shell常用招式大全-入门篇</title>
            <link>//blog.pytool.com/it/shell/shell%E5%B8%B8%E7%94%A8%E6%8B%9B%E5%BC%8F%E5%A4%A7%E5%85%A8%E5%85%A5%E9%97%A8%E7%AF%87/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/shell%E5%B8%B8%E7%94%A8%E6%8B%9B%E5%BC%8F%E5%A4%A7%E5%85%A8%E5%85%A5%E9%97%A8%E7%AF%87/</guid>
            <description>

&lt;p&gt;采用source 而不是bash 命令 可以将环境变量传递过去&lt;/p&gt;

&lt;p&gt;本教程分为入门篇，命令篇和实战篇，结合平时工作中使用Shell的经验编写。以实例为主，侧重于应用，总结了一些实用的技巧。&lt;/p&gt;

&lt;p&gt;以下为本教程的《入门篇》，适于初学者快速入门以及老手查缺补漏。&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;第一招-helloworld&#34;&gt;第一招 HelloWorld&lt;/h1&gt;

&lt;h2 id=&#34;第一式-echo&#34;&gt;第一式：echo&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;echo -n &amp;quot;Hello World&amp;quot;    # 不带换行
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;echo -e &#39;\e[0;33;1mHello\e[0m World&#39;   # 带颜色的玩法
echo -e &#39;\e[0;33;4mHello\e[0m World&#39;   # 带颜色+下划线
echo -e &#39;\e[0;33;5mHello\e[0m World&#39;   # 带颜色+闪烁
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;格式为 &lt;code&gt;\e[背景色;前景色;高亮格式m&lt;/code&gt;，请阅读&lt;a href=&#34;http://blog.chinaunix.net/uid-15007890-id-3152717.html&#34;&gt;详细文档&lt;/a&gt;后使用正确的姿势进行装逼。&lt;/p&gt;

&lt;h1 id=&#34;第二招-判断&#34;&gt;第二招 判断&lt;/h1&gt;

&lt;h2 id=&#34;第一式-if&#34;&gt;第一式：if&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;if true
then
    echo &amp;quot;Hello World&amp;quot;
else
	echo &amp;quot;Bug&amp;quot;
fi

if false
then
    echo &amp;quot;Hello World&amp;quot;
elif true
then
    echo &amp;quot;Bug&amp;quot;
else
	echo &amp;quot;Bee&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;判断原理&#34;&gt;判断原理&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;if&lt;/code&gt;、&lt;code&gt;elif&lt;/code&gt;会执行它后面跟着的命令，然后看返回值是否为&lt;code&gt;0&lt;/code&gt;，如果为&lt;code&gt;0&lt;/code&gt;则执行&lt;code&gt;then&lt;/code&gt;下面的语句块，否则执行&lt;code&gt;else&lt;/code&gt;下面的语句块。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]$ true
[casheywen@ubuntu:~]$ echo $?
0
[casheywen@ubuntu:~]$ false
[casheywen@ubuntu:~]$ echo $?
1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt;、&lt;code&gt;false&lt;/code&gt;事实上也为一个命令，&lt;code&gt;true&lt;/code&gt;的返回码必为&lt;code&gt;0&lt;/code&gt;，&lt;code&gt;false&lt;/code&gt;的返回码必为&lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$?&lt;/code&gt;为&lt;code&gt;shell&lt;/code&gt;内置变量，用于存放上一个命令的返回码&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第二式-test-和&#34;&gt;第二式：test、[ ] 和 [[ ]]&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;test&lt;/code&gt;、&lt;code&gt;[ ]&lt;/code&gt;、&lt;code&gt;[[ ]]&lt;/code&gt;实际上都是&lt;code&gt;shell&lt;/code&gt;中的命令，执行之后会返回&lt;code&gt;1&lt;/code&gt;或&lt;code&gt;0&lt;/code&gt;，而这几个命令与&lt;code&gt;if&lt;/code&gt;相结合可以达到我们所需要的许多判断功能，例如测试字符串是否为空的三种写法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;s=&amp;quot;&amp;quot;
if [ -z ${s} ]
then
    echo &amp;quot;empty&amp;quot;
fi

if [[ -z ${s} ]]
then
    echo &amp;quot;empty&amp;quot;
fi

if test -z ${s}
then
    echo &amp;quot;empty&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;事实上，&lt;code&gt;if&lt;/code&gt;后的&lt;code&gt;[  ]&lt;/code&gt;、&lt;code&gt;[[  ]]&lt;/code&gt;、&lt;code&gt;test&lt;/code&gt;命令都是可以单独执行的，而根据&lt;code&gt;if&lt;/code&gt;的&lt;a href=&#34;#判断原理&#34;&gt;判断原理&lt;/a&gt;，后续执行哪个分支也是由&lt;code&gt;[  ]&lt;/code&gt;、&lt;code&gt;[[  ]]&lt;/code&gt;、&lt;code&gt;test&lt;/code&gt;的返回值来决定的，以下是单独执行它们的效果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]$ s=&amp;quot;&amp;quot;
[casheywen@ubuntu:~]$ [ -z &amp;quot;${s}&amp;quot; ]
[casheywen@ubuntu:~]$ echo $?
0
[casheywen@ubuntu:~]$ s=&amp;quot;abc&amp;quot;
[casheywen@ubuntu:~]$ test -z &amp;quot;${s}&amp;quot;
[casheywen@ubuntu:~]$ echo $?
1
[casheywen@ubuntu:~]$ s=&amp;quot;123&amp;quot;
[casheywen@ubuntu:~]$ [[ 100 -lt ${s} ]]
[casheywen@ubuntu:~]$ echo $?
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在性能方面&lt;code&gt;[ ]&lt;/code&gt;和&lt;code&gt;test&lt;/code&gt;性能基本相同，&lt;code&gt;[[ ]]&lt;/code&gt;性能是最高的，为前两者的&lt;code&gt;5&lt;/code&gt;倍左右（以&lt;code&gt;-d&lt;/code&gt;运算符测试），所以建议尽量使用&lt;code&gt;[[ ]]&lt;/code&gt;提高脚本性能。&lt;/p&gt;

&lt;h2 id=&#34;文件测试&#34;&gt;文件测试&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-e filename&lt;/td&gt;
&lt;td&gt;如果 filename 存在，则为真&lt;/td&gt;
&lt;td&gt;[ -e /var/log/syslog ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-d filename&lt;/td&gt;
&lt;td&gt;如果 filename 为目录，则为真&lt;/td&gt;
&lt;td&gt;[ -d /tmp/mydir ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-f filename&lt;/td&gt;
&lt;td&gt;如果 filename 为常规文件，则为真&lt;/td&gt;
&lt;td&gt;[ -f /usr/bin/grep ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-L filename&lt;/td&gt;
&lt;td&gt;如果 filename 为符号链接，则为真&lt;/td&gt;
&lt;td&gt;[ -L /usr/bin/grep ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-r filename&lt;/td&gt;
&lt;td&gt;如果 filename 可读，则为真&lt;/td&gt;
&lt;td&gt;[ -r /var/log/syslog ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-w filename&lt;/td&gt;
&lt;td&gt;如果 filename 可写，则为真&lt;/td&gt;
&lt;td&gt;[ -w /var/mytmp.txt ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-x filename&lt;/td&gt;
&lt;td&gt;如果 filename 可执行，则为真&lt;/td&gt;
&lt;td&gt;[ -x /usr/bin/grep ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;filename1 -nt filename2&lt;/td&gt;
&lt;td&gt;如果 filename1 比 filename2 新，则为真&lt;/td&gt;
&lt;td&gt;[ /tmp/install/etc/services -nt /etc/services ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;filename1 -ot filename2&lt;/td&gt;
&lt;td&gt;如果 filename1 比 filename2 旧，则为真&lt;/td&gt;
&lt;td&gt;[ /boot/bzImage -ot arch/i386/boot/bzImage ]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;字符串比较&#34;&gt;字符串比较&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-z string&lt;/td&gt;
&lt;td&gt;如果 string 长度为零，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ -z &amp;quot;${myvar}&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;-n string&lt;/td&gt;
&lt;td&gt;如果 string 长度非零，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ -n &amp;quot;${myvar}&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string1 = string2&lt;/td&gt;
&lt;td&gt;如果 string1 与 string2 相同，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ &amp;quot;${myvar}&amp;quot; = &amp;quot;abc&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string1 != string2&lt;/td&gt;
&lt;td&gt;如果 string1 与 string2 不同，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ &amp;quot;${myvar}&amp;quot; != &amp;quot;abc&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string1 &amp;lt; string&lt;/td&gt;
&lt;td&gt;如果 string1 小于 string2，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ &amp;quot;${myvar}&amp;quot; \&amp;lt; &amp;quot;abc&amp;quot; ]&lt;/code&gt;&lt;br/&gt;&lt;code&gt;[[ &amp;quot;${myvar}&amp;quot; &amp;lt; &amp;quot;abc&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;string1 &amp;gt; string&lt;/td&gt;
&lt;td&gt;如果 string1 大于 string2，则为真&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[ &amp;quot;${myvar}&amp;quot; \&amp;gt; &amp;quot;abc&amp;quot; ]&lt;/code&gt;&lt;br/&gt;&lt;code&gt;[[ &amp;quot;${myvar}&amp;quot; &amp;gt; &amp;quot;abc&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在字符串两边加上&amp;rdquo;&amp;ldquo;防止出错&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&lt;/code&gt;是字符串比较，不要错用成整数比较&lt;/li&gt;
&lt;li&gt;如果是在&lt;code&gt;[ ]&lt;/code&gt;中使用&lt;code&gt;&amp;lt;&lt;/code&gt;和&lt;code&gt;&amp;gt;&lt;/code&gt;，需要将它们写成&lt;code&gt;\&amp;lt;&lt;/code&gt;和&lt;code&gt;\&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;整数比较&#34;&gt;整数比较&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;num1 -eq num2&lt;/td&gt;
&lt;td&gt;等于&lt;/td&gt;
&lt;td&gt;[ 3 -eq $mynum ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;num1 -ne num2&lt;/td&gt;
&lt;td&gt;不等于&lt;/td&gt;
&lt;td&gt;[ 3 -ne $mynum ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;num1 -lt num2&lt;/td&gt;
&lt;td&gt;小于&lt;/td&gt;
&lt;td&gt;[ 3 -lt $mynum ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;num1 -le num2&lt;/td&gt;
&lt;td&gt;小于或等于&lt;/td&gt;
&lt;td&gt;[ 3 -le $mynum ]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;num1 -ge num2&lt;/td&gt;
&lt;td&gt;大于或等于&lt;/td&gt;
&lt;td&gt;[ 3 -ge $mynum ]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;第三式&#34;&gt;第三式：&amp;amp;&amp;amp;、||&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;可以用来对两个判断语句求与&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [ -n &amp;quot;abc&amp;quot; ] &amp;amp;&amp;amp; [ -n &amp;quot;aa&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [[ -n &amp;quot;abc&amp;quot; ]] &amp;amp;&amp;amp; [[ -n &amp;quot;aa&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if test -n &amp;quot;abc&amp;quot; &amp;amp;&amp;amp; test -n &amp;quot;aa&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [[ -n &amp;quot;abc&amp;quot; &amp;amp;&amp;amp; -n &amp;quot;aa&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;只有&lt;code&gt;[[ ]]&lt;/code&gt;才允许把&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;写在里面&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;\|\|&lt;/code&gt;可以用来对两个判断语句求或&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [ -n &amp;quot;abc&amp;quot; ] \|\| [ -n &amp;quot;aa&amp;quot; ]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [[ -n &amp;quot;abc&amp;quot; ]] \|\| [[ -n &amp;quot;aa&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if test -n &amp;quot;abc&amp;quot; \|\| test -n &amp;quot;aa&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;if [[ -n &amp;quot;abc&amp;quot; \|\| -n &amp;quot;aa&amp;quot; ]]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&amp;gt; &lt;strong&gt;注：&lt;/strong&gt;只有&lt;code&gt;[[ ]]&lt;/code&gt;才允许把`&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;小技巧&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;、&lt;code&gt;||&lt;/code&gt;还可以用来拼接命令，达到按前一个命令成功与否来决定是否执行后一个命令的效果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /data &amp;amp;&amp;amp; ls         # 当`cd /data`返回0(即成功)时才执行后面的`ls`
cd /data || cd /root   # 当`cd /data`返回非0(即失败)时才执行后面的`cd /root`
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;第三招-循环&#34;&gt;第三招：循环&lt;/h1&gt;

&lt;h2 id=&#34;第一式-for&#34;&gt;第一式：for&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;for i in {1..100}
do
    echo ${i}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;{1..100}&lt;/code&gt;属于&lt;a href=&#34;#第五招通配&#34;&gt;通配&lt;/a&gt;的一种写法，展开会是&lt;code&gt;1 2 3 ... 100&lt;/code&gt;（1~100以空格隔开）这样的字串。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例如&lt;code&gt;for i in 1 2 3;&lt;/code&gt;这样的语句，&lt;code&gt;for&lt;/code&gt;会将&lt;code&gt;1&lt;/code&gt;、&lt;code&gt;2&lt;/code&gt;、&lt;code&gt;3&lt;/code&gt;依次赋值于&lt;code&gt;i&lt;/code&gt;进行循环，而对于&lt;a href=&#34;#第五招通配&#34;&gt;通配&lt;/a&gt;的情况，&lt;code&gt;for&lt;/code&gt;则会将通配展开后将里面的每一项依次赋值于&lt;code&gt;i&lt;/code&gt;进行循环。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;for i in `seq 100`
do
    echo ${i}
done

for i in `seq 1 2 100`
do
    echo ${i}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;seq&lt;/code&gt;本身为一个命令，用于输出数字组成的序列，如&lt;code&gt;seq 100&lt;/code&gt;会生成并输出&lt;code&gt;1 2 3 ... 100&lt;/code&gt;（1~100以换行符隔开）这样的序列，而&lt;code&gt;seq 1 2 100&lt;/code&gt;则会生成并输出&lt;code&gt;1 3 5 ... 99&lt;/code&gt;（以1开始，2为公差的等差数列中小于100的项，以换行符隔开）。&lt;/li&gt;
&lt;li&gt;反引号(`)之间的命令会被执行，其输出结果会转换成一个&lt;a href=&#34;#第五式将命令执行结果存入变量&#34;&gt;变量&lt;/a&gt;，故上面的&lt;code&gt;for in&lt;/code&gt;会依次取出&lt;code&gt;seq&lt;/code&gt;的执行结果赋值于&lt;code&gt;i&lt;/code&gt;进行循环。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;for ((i = 0; i &amp;lt; 100; i++))
do
    echo ${i}
done

for ((i = 0; i &amp;lt; 100; i+= 2))
do
    echo ${i}
done
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上与C语言式的&lt;code&gt;for&lt;/code&gt;循环语法基本相同，区别在于双重括号：&lt;code&gt;(( ))&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第二式-while-until&#34;&gt;第二式：while、until&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;i=0
while [[ ${i} -lt 100 ]]
do
    echo ${i}
    ((i++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;i=0
until [[ ${i} -ge 100 ]]
do
    echo ${i}
    ((i++))
done
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;while&lt;/code&gt;和&lt;code&gt;until&lt;/code&gt;的判断原理与&lt;code&gt;if&lt;/code&gt;是类似的，它会执行并它后面跟着的命令，不同点在于：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt;是后面语句返回值为&lt;code&gt;0&lt;/code&gt;，则执行循环中的语句块，否则跳出循环;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;until&lt;/code&gt;则是后面语句返回值非&lt;code&gt;0&lt;/code&gt;，则执行循环中的语句块，否则跳出循环。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;第四招-变量&#34;&gt;第四招：变量&lt;/h1&gt;

&lt;h2 id=&#34;第一式-整数&#34;&gt;第一式：整数&lt;/h2&gt;

&lt;h2 id=&#34;整数的运算&#34;&gt;整数的运算&lt;/h2&gt;

&lt;p&gt;方法较多，此处只列举最浅显易懂，并且效率最高的办法——直接将符合C语言语法的表达式放到&lt;code&gt;(( ))&lt;/code&gt;中即可达到对整数的计算目的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $(( 1+1 ))        # 最简单的1+1
echo $(( (1+2)*3/4 ))  # 表达式中还可以带括号
echo $(( 1&amp;lt;&amp;lt;32 ))      # 左移右移也支持，但仅限于-4294967296~4294967296之间的数值
echo $(( 1&amp;amp;3 ))        # &amp;amp;、^、|、~ 这样的位操作亦支持
(( i=1+2 ))            # 将1+2计算出结果后赋值给i，后续若`echo ${i}`会得到3
(( i++ ))              # 变量i自增1
(( i+=3 ))             # 变量i自增3
# ...                  # 还有很多，不再详列
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;进行整数运算的方法还有：&lt;code&gt;expr&lt;/code&gt;、&lt;code&gt;$[]&lt;/code&gt;、&lt;code&gt;let&lt;/code&gt;等&lt;code&gt;shell&lt;/code&gt;等内置命令，也可调用&lt;code&gt;bc&lt;/code&gt;、&lt;code&gt;python&lt;/code&gt;等外部工具进行更复杂的数学运算&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第二式-字符串&#34;&gt;第二式：字符串&lt;/h2&gt;

&lt;h2 id=&#34;替换&#34;&gt;替换&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;${string/old/new}&lt;/td&gt;
&lt;td&gt;string中第一个old替换为new&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string//old/new}&lt;/td&gt;
&lt;td&gt;string中所有old替换为new&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# s=&amp;quot;i hate hate you&amp;quot;
[casheywen@ubuntu:~]# echo ${s/hate/love}
i love hate you
[casheywen@ubuntu:~]# echo ${s//hate/love}
i love love you
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;截取子串&#34;&gt;截取子串&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;${string:n}&lt;/td&gt;
&lt;td&gt;string从下标n到结尾的子串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string:n:m}&lt;/td&gt;
&lt;td&gt;string从下标n开始长度为m的子串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string::m}&lt;/td&gt;
&lt;td&gt;string从下标0开始长度为m的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# s=&amp;quot;0123456789&amp;quot;
[casheywen@ubuntu:~]# echo ${s:3}
3456789
[casheywen@ubuntu:~]# echo ${s::3}
012
[casheywen@ubuntu:~]# echo ${s:0:3}
012
[casheywen@ubuntu:~]# echo ${s:2:5}
23456
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;通配删除&#34;&gt;通配删除&lt;/h2&gt;

&lt;p&gt;通配删除，即按通配符，删除掉字符串中符合条件的一部分&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;${string#pattern}&lt;/td&gt;
&lt;td&gt;string从左到右删除pattern的最小通配&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string##pattern}&lt;/td&gt;
&lt;td&gt;string从左到右删除pattern的最大通配&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string%pattern}&lt;/td&gt;
&lt;td&gt;string从右到左删除pattern的最小通配&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;${string%%pattern}&lt;/td&gt;
&lt;td&gt;string从右到左删除pattern的最大通配&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;此处通配规则参考&lt;a href=&#34;#通配符一览表&#34;&gt;通配符一览表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;最小通配和最大通配的区别：
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最小通配：符合通配的最小子串
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最大通配：符合通配的最大子串
例如string值为&lt;code&gt;/00/01/02/dir&lt;/code&gt;，对于通配&lt;code&gt;/*/&lt;/code&gt;，其最小通配为&lt;code&gt;/00/&lt;/code&gt;，而最大通配&lt;code&gt;/00/01/02/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# s=&amp;quot;/00/01/02/dir&amp;quot;
[casheywen@ubuntu:~]# echo ${s#/*/}
01/02/dir
[casheywen@ubuntu:~]# echo ${s##/*/}
dir
[casheywen@ubuntu:~]#
[casheywen@ubuntu:~]# s=&amp;quot;abc/cde/efg&amp;quot;
[casheywen@ubuntu:~]# echo ${s%/*}
abc/cde
[casheywen@ubuntu:~]# echo ${s%%/*}
abc
[casheywen@ubuntu:~]#
[casheywen@ubuntu:~]# s=&amp;quot;/00/01/02/dir&amp;quot;
[casheywen@ubuntu:~]# echo ${s#/*/}
01/02/dir
[casheywen@ubuntu:~]# echo ${s##/*/}
dir
[casheywen@ubuntu:~]# s=&amp;quot;abc/cde/efg&amp;quot;
[casheywen@ubuntu:~]# echo ${s%/*}
abc/cde
[casheywen@ubuntu:~]# echo ${s%%/*}
abc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;小技巧&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;获取文件名：&lt;code&gt;${path##*/}&lt;/code&gt; (相当于&lt;code&gt;basename&lt;/code&gt;命令的功能)&lt;/li&gt;
&lt;li&gt;获取目录名：&lt;code&gt;${path%/*}&lt;/code&gt; (相当于&lt;code&gt;dirname&lt;/code&gt;命令的功能)&lt;/li&gt;
&lt;li&gt;获取后缀名：&lt;code&gt;${path##*.}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# s=&amp;quot;/root/test/dir/subdir/abc.txt&amp;quot;
[casheywen@ubuntu:~]# echo ${s##*/}
abc.txt
[casheywen@ubuntu:~]# echo ${s%/*}
/root/test/dir/subdir
[casheywen@ubuntu:~]# echo ${s##*.}
txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第三式-数组&#34;&gt;第三式：数组&lt;/h2&gt;

&lt;h2 id=&#34;普通数组&#34;&gt;普通数组&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;a=()         # 空数组
a=(1 2 3)    # 元素为1,2,3的数组
echo ${#a[*]}  # 数组长度
echo ${a[2]}   # 下标为2的元素值（下标从0开始）
a[1]=0         # 给下标为1的元素赋值

# 遍历数组
for i in ${a[*]}
do
    echo ${i}
done

unset a        # 清空数组
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;关联数组&#34;&gt;关联数组&lt;/h2&gt;

&lt;p&gt;关联数组可以用于存储&lt;code&gt;key-value&lt;/code&gt;型的数据，其功能相当于&lt;code&gt;C++&lt;/code&gt;中的&lt;code&gt;map&lt;/code&gt;或&lt;code&gt;python&lt;/code&gt;中的&lt;code&gt;dict&lt;/code&gt;。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;declare -A a        # 声明关联数组（必须有此句）
a=([&amp;quot;apple&amp;quot;]=&amp;quot;a1&amp;quot; [&amp;quot;banana&amp;quot;]=&amp;quot;b2&amp;quot; [&amp;quot;carrot&amp;quot;]=&amp;quot;c3&amp;quot;)   # 初始化关联数组
echo ${#a[*]}       # 获取元素个数
echo ${a[&amp;quot;carrot&amp;quot;]} # 获取元素值  
a[&amp;quot;durian&amp;quot;]=&amp;quot;d4&amp;quot;    # 插入或修改元素
echo ${!a[*]}       # 获取所有的key
unset a[&amp;quot;banana&amp;quot;]   # 删除元素

# 遍历数组(仅value)
for i in ${a[*]}
do
    echo ${i}
done

# 遍历数组(key和value)
for key in ${!a[*]}
do
	echo &amp;quot;${key} ==&amp;gt; ${a[${key}]}&amp;quot;
done

unset a             # 清空数组
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;关联数组需要bash 4.0以上版本才支持，选用需慎重。查看&lt;code&gt;bash&lt;/code&gt;版本用&lt;code&gt;bash --version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关联数组必须用&lt;code&gt;declare -A&lt;/code&gt;显示声明类型，否则数值会出错。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第四式-将命令执行结果存入变量&#34;&gt;第四式：将命令执行结果存入变量&lt;/h2&gt;

&lt;h2 id=&#34;与&#34;&gt;` `与$( )&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;LINE_CNT=`wc -l test.txt`
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;LINE_CNT=$(wc -l test.txt)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上命令均可把&lt;code&gt;wc -l test.txt&lt;/code&gt;的结果存入&lt;code&gt;LINE_CNT&lt;/code&gt;变量中&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;` `&lt;/code&gt; 和&lt;code&gt;$( )&lt;/code&gt;都只将命令行标准输出的内容存入变量，如果需要将标准错误内容存入变量，需要用到&lt;a href=&#34;#第五招重定向&#34;&gt;重定向&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;换行符处理&#34;&gt;换行符处理&lt;/h2&gt;

&lt;p&gt;如果命令执行结果有多行内容，存入变量并打印时换行符会丢失：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# cat test.txt
a
b
c
[casheywen@ubuntu:~]# CONTENT=`cat test.txt`
[casheywen@ubuntu:~]# echo ${CONTENT}
a b c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若需要保留换行符，则在打印时必须加上&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# CONTENT=`cat test.txt`
[casheywen@ubuntu:~]# echo &amp;quot;${CONTENT}&amp;quot;      
a
b
c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;##&lt;/p&gt;

&lt;h1 id=&#34;第五招-重定向&#34;&gt;第五招：重定向&lt;/h1&gt;

&lt;h2 id=&#34;标准输入流-标准输出流-标准错误流&#34;&gt;标准输入流、标准输出流、标准错误流&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;英文缩写&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;默认绑定位置&lt;/th&gt;
&lt;th&gt;文件路径&lt;/th&gt;
&lt;th&gt;Shell中代号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;标准输入流&lt;/td&gt;
&lt;td&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;程序读取的用户输入&lt;/td&gt;
&lt;td&gt;键盘输入&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/dev/stdin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;标准输出流&lt;/td&gt;
&lt;td&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;程序的打印的正常信息&lt;/td&gt;
&lt;td&gt;终端(&lt;code&gt;terminal&lt;/code&gt;), 即显示器&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/dev/stdin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;标准错误流&lt;/td&gt;
&lt;td&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;程序的错误信息&lt;/td&gt;
&lt;td&gt;终端(&lt;code&gt;terminal&lt;/code&gt;)，, 即显示器&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/dev/stderr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;重定向方式一览表&#34;&gt;重定向方式一览表&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;gt; file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stdout 重定向到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;gt;&amp;gt; file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stdout 追加到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd 2&amp;gt; file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stderr 重定向到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd 2&amp;gt;&amp;gt; file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stderr 追加到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;amp;&amp;gt; file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stdout 和 stderr 重定向到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stdout 和 stderr 重定向到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;gt;&amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把 stdout 和 stderr 追加到 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;lt;file &amp;gt;file2 cmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cmd 以 file 作为 stdin，以 file2 作为 stdout&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cat &amp;lt;&amp;gt;file&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以读写的方式打开 file&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;lt; file cmd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;cmd 命令以 file 文件作为 stdin&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cmd &amp;lt;&amp;lt; delimiter Here document&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从 stdin 中读入，直至遇到 delimiter 分界符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;第一式-重定向标准输出流-stdout&#34;&gt;第一式：重定向标准输出流(stdout)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;把程序打印的内容输出到文件&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 以下两种方式都会将`Hello World`写入到hello.txt(若不存在则创建)
echo &amp;quot;Hello World&amp;quot; &amp;gt; hello.txt   # hello.txt原有的将被覆盖
echo &amp;quot;Hello World&amp;quot; &amp;gt;&amp;gt; hello.txt  # hello.txt原有内容后追加`Hello World`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第二式-重定向标准错误流-stderr&#34;&gt;第二式：重定向标准错误流(stderr)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;把程序的错误信息输出到文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如文件路径中不存在&lt;code&gt;+++&lt;/code&gt;这个文件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# ls +++
ls: cannot access +++: No such file or directory
[casheywen@ubuntu:~]# ls +++ &amp;gt; out.txt
ls: cannot access +++: No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的&lt;code&gt;ls +++&lt;/code&gt;后输出的内容为标准错误流中的错误信息，所以即使用&lt;code&gt;&amp;gt; out.txt&lt;/code&gt;重定向标准输入，错误信息仍然被打印到了屏幕。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 以下两种方式都会将`ls +++`输出的错误信息输出到err.txt(若不存在则创建)
ls +++ 2&amp;gt; err.txt    # err.txt原有内容将被覆盖
ls +++ 2&amp;gt;&amp;gt; err.txt   # err.txt原有内容后追加内容
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第三式-重定向标准输入流-stdin&#34;&gt;第三式：重定向标准输入流(stdin)&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. 让程序从文件读取输入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以默认从标准输入读取表达式，并进行数学计算的命令&lt;code&gt;bc&lt;/code&gt;为例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# bc -q
1+1
2
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;1+1&lt;/code&gt;为键盘输入的内容，&lt;code&gt;2&lt;/code&gt;为&lt;code&gt;bc&lt;/code&gt;命令打印的计算结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bc&lt;/code&gt;后的&lt;code&gt;-q&lt;/code&gt;参数用于禁止输出欢迎信息&lt;/li&gt;
&lt;li&gt;以上重定向方法格式为&lt;code&gt;命令 &amp;lt; 文件路径&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果我需要把已经存在文件&lt;code&gt;exp.txt&lt;/code&gt;中的一个表达式输入到&lt;code&gt;bc&lt;/code&gt;中进行计算，可以采用重定向标准输入流的方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bc -q &amp;lt; exp.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;当&lt;code&gt;exp.txt&lt;/code&gt;中内容为&lt;code&gt;1+1&lt;/code&gt;时，以上语句输出&lt;code&gt;2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;bc&lt;/code&gt;命令本身支持从文件输入，如不使用重定向，也可用&lt;code&gt;bc exp.txt&lt;/code&gt;达到相同效果&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2. 将&lt;a href=&#34;#第四招变量&#34;&gt;变量&lt;/a&gt;中内容作为程序输入&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXP=&amp;quot;1+1&amp;quot;
bc -q &amp;lt;&amp;lt;&amp;lt; &amp;quot;${EXP}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;注：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;以上代码等同于执行&lt;code&gt;bc&lt;/code&gt;并输入&lt;code&gt;1+1&lt;/code&gt;，得到的输出为&lt;code&gt;2&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;以上重定向方法格式为&lt;code&gt;命令 &amp;lt;&amp;lt;&amp;lt; 变量内容&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3. 将当前shell脚本中的多行内容作为程序的输入&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如在shell中内嵌多行python代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python &amp;lt;&amp;lt; EOF
print &#39;hello from python&#39;
print &#39;hello&#39; + &#39;world&#39;
EOF

# 内容中支持shell变量
MSG=&amp;quot;shell variable&amp;quot;

python &amp;lt;&amp;lt; EOF
print &#39;${MSG}&#39;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;以上用法可以方便地将某个程序需要的多行输入内容直接包含在当前脚本中&lt;/li&gt;
&lt;li&gt;支持变量，可以动态地改变多行输入的内容&lt;/li&gt;
&lt;li&gt;以上重定向方法格式为：&lt;code&gt;命令 &amp;lt;&amp;lt; EOF (换行)...(换行) EOF&lt;/code&gt;，其中的&lt;code&gt;EOF&lt;/code&gt;换成其它字符串也是有效的，如：&lt;code&gt;命令 &amp;lt;&amp;lt; ABC (换行)...(换行) ABC&lt;/code&gt;的，但通用习惯都使用&lt;code&gt;EOF&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;第六招-管道&#34;&gt;第六招：管道&lt;/h1&gt;

&lt;h2 id=&#34;第一式-管道的基本功能&#34;&gt;第一式：管道的基本功能&lt;/h2&gt;

&lt;p&gt;管道的写法为 &lt;code&gt;cmd1 | cmd2&lt;/code&gt;，功能是依次执行&lt;code&gt;cmd1&lt;/code&gt;和&lt;code&gt;cmd2&lt;/code&gt;，并将&lt;code&gt;cmd1&lt;/code&gt;的标准输出作为&lt;code&gt;cmd2&lt;/code&gt;的标准输入，例如：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;1+1&amp;quot; | bc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里 &lt;code&gt;echo &amp;quot;1+1&amp;quot;&lt;/code&gt; 会将&lt;code&gt;1+1&lt;/code&gt;输出到标准输出，而管道会将&lt;code&gt;echo&lt;/code&gt;输出的&lt;code&gt;1+1&lt;/code&gt;作为&lt;code&gt;bc&lt;/code&gt;命令的标准输入，这样&lt;code&gt;bc&lt;/code&gt;会读取到&lt;code&gt;1+1&lt;/code&gt;，最终得到计算结果&lt;code&gt;2&lt;/code&gt;打印到屏幕。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;管道可以多级拼接：&lt;code&gt;cmd1 | cmd2 | cmd3 | ...&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;管道的返回值为最后一级命令的返回值&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第二式-管道与while-read组合&#34;&gt;第二式：管道与while、read组合&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;LINE_NO=0
cat test.txt |
while read LINE
do
	(( LINE_NO++ ))
	echo &amp;quot;${LINE_NO} ${LINE}&amp;quot;
done

# echo &amp;quot;${LINE_NO}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码可以将&lt;code&gt;test.txt&lt;/code&gt;中每一行标上行标后输出。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;read&lt;/code&gt;命令用于从标准输入读取一行并赋值给一个或多个变量，如&lt;code&gt;read LINE&lt;/code&gt;会从标准输入读取一行并将整行内容赋值给&lt;code&gt;LINE&lt;/code&gt;变量，&lt;code&gt;read A B&lt;/code&gt;则会从标准输入读入一行并将这行的第1、2列分别赋值给A、B两个变量（分割符默认为空格或tab，可给&lt;code&gt;IFS&lt;/code&gt;赋值来更改分割符）
&amp;gt; 2. 末尾注释掉的&lt;code&gt;echo &amp;quot;${LINE_NO}&amp;quot;&lt;/code&gt;若执行会输出&lt;code&gt;0&lt;/code&gt;，原因是管道中的&lt;code&gt;while&lt;/code&gt;语句是执行在子进程中的，不会改变父进程中&lt;code&gt;LINE_NO&lt;/code&gt;变量的值&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第三式-管道与xargs组合&#34;&gt;第三式：管道与xargs组合&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;find . -type f -name *.log | xargs rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码可以将当前目录及子目录所有后缀名为&lt;code&gt;.log&lt;/code&gt;的文件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find . -type f -name *.log | xargs -i mv {} /data/log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上代码可以将当前目录及子目录中所有后缀名为&lt;code&gt;.log&lt;/code&gt;的文件移动到&lt;code&gt;/data/log&lt;/code&gt;中
&amp;gt; &lt;strong&gt;注：&lt;/strong&gt; &lt;code&gt;xargs&lt;/code&gt;可以从标准输入读取内容，以之构建并执行另一个命令行
&amp;gt;&lt;br /&gt;
&amp;gt;  - &lt;code&gt;xargs&lt;/code&gt;直接接命令名称，则将从标准输入读取的所有内容合并为一行构建命令行并执行
&amp;gt;  - &lt;code&gt;xargs&lt;/code&gt;加上&lt;code&gt;-i&lt;/code&gt;参数，则会每读取一行就构建并执行一个命令行，构建命令行时会将&lt;code&gt;{}&lt;/code&gt;替换为该行的内容&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# cat test.txt
a
b
c
[casheywen@ubuntu:~]# cat test.txt | xargs echo rm
rm a b c
[casheywen@ubuntu:~]# cat test.txt | xargs -i echo rm {}
rm a
rm b
rm c
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;上例展示了&lt;code&gt;xargs&lt;/code&gt;构建命令的原理，如果去掉&lt;code&gt;xargs&lt;/code&gt;后的&lt;code&gt;echo&lt;/code&gt;，则会执行打印出来的命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;第七招-通配&#34;&gt;第七招：通配&lt;/h1&gt;

&lt;h2 id=&#34;shell通配的原理&#34;&gt;shell通配的原理&lt;/h2&gt;

&lt;p&gt;如果你的当前目录中有&lt;code&gt;1.txt 2.txt 3.txt&lt;/code&gt;三个文件，那么当你执行&lt;code&gt;ls *.txt&lt;/code&gt;这条命令，&lt;code&gt;shell&lt;/code&gt;究竟为你做了什么？&lt;/p&gt;

&lt;p&gt;其实&lt;code&gt;shell&lt;/code&gt;会先读取当前目录，然后按&lt;code&gt;*.txt&lt;/code&gt;的通配条件过滤得到&lt;code&gt;1.txt 2.txt 3.txt&lt;/code&gt;这个文件列表，然后将这个列表作为参数传给&lt;code&gt;ls&lt;/code&gt;，即&lt;code&gt;ls *.txt&lt;/code&gt;相当于&lt;code&gt;ls 1.txt 2.txt 3.txt&lt;/code&gt;，&lt;code&gt;ls&lt;/code&gt;命令本身并不会得到&lt;code&gt;*.txt&lt;/code&gt;这样的参数。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注：仅当目录中没有符合&lt;code&gt;*.txt&lt;/code&gt;通配的文件，&lt;code&gt;shell&lt;/code&gt;才会将&lt;code&gt;*.txt&lt;/code&gt;这个字符串当作参数直接传给&lt;code&gt;ls&lt;/code&gt;命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以如果需要列出当前目录中所有的&lt;code&gt;txt&lt;/code&gt;文件，我们使用&lt;code&gt;echo *.txt&lt;/code&gt;也同样可以达到目的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# ls *.txt
1.txt  2.txt  3.txt
[casheywen@ubuntu:~]# echo *.txt
1.txt 2.txt 3.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;对于&lt;code&gt;{ }&lt;/code&gt;通配&lt;code&gt;shell&lt;/code&gt;不会读取目录并过滤获得文件列表。详细请&lt;a href=&#34;#通配符一览表&#34;&gt;参考下文&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;通配符一览表&#34;&gt;通配符一览表&lt;/h2&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;匹配 0 或多个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a*b&lt;/code&gt; a与b之间可以有任意长度的任意字符, 也可以一个也没有, 如aabcb, axyzb, a012b, ab。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;匹配任意一个字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a?b&lt;/code&gt; a与b之间必须也只能有一个字符, 可以是任意字符, 如aab, abb, acb, a0b。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 list 中的任意单一字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a[xyz]b&lt;/code&gt; a与b之间必须也只能有一个字符, 但只能是 x 或 y 或 z, 如: axb, ayb, azb。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[!list]&lt;/code&gt;&lt;br/&gt;&lt;code&gt;[^list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 除list 中的任意单一字符&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a[!0-9]b&lt;/code&gt; a与b之间必须也只能有一个字符, 但不能是阿拉伯数字, 如axb, aab, a-b。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[c1-c2]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 c1-c2 中的任意单一字符 如：[0-9] [a-z]&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a[0-9]b&lt;/code&gt; 0与9之间必须也只能有一个字符 如a0b, a1b&amp;hellip; a9b。&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{string1,string2,...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;枚举sring1或string2(或更多)其一字符串&lt;/td&gt;
&lt;td&gt;&lt;code&gt;a{abc,xyz,123}b&lt;/code&gt; 展开成&lt;code&gt;aabcb axyzb a123b&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{c1..c2}&lt;/code&gt;&lt;br/&gt;&lt;code&gt;{n1..n2}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;枚举c1-c2中所有字符或n1-n2中所有数字&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{a..f}&lt;/code&gt;展开成&lt;code&gt;a b c d e f&lt;/code&gt;&lt;br/&gt;&lt;code&gt;a{1..5}&lt;/code&gt; 展开成&lt;code&gt;a1 a2 a3 a4 a5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;?&lt;/code&gt;、&lt;code&gt;[ ]&lt;/code&gt;的通配都会按&lt;a href=&#34;#shell%E9%80%9A%E9%85%8D%E7%9A%84%E5%8E%9F%E7%90%86&#34;&gt;读取目录并过滤&lt;/a&gt;的方式展开通配项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ }&lt;/code&gt;则不会有读取目录的过程，它是通过枚举所有符合条件的通配项直接展开的
&lt;code&gt;
[casheywen@ubuntu:~]# ls
1.txt  2.txt  3.txt
[casheywen@ubuntu:~]# echo *.txt
1.txt 2.txt 3.txt
[casheywen@ubuntu:~]# echo {1..5}.txt
1.txt 2.txt 3.txt 4.txt 5.txt
[casheywen@ubuntu:~]# ls {1..5}.txt
ls: cannot access 4.txt: No such file or directory
ls: cannot access 5.txt: No such file or directory
1.txt  2.txt  3.txt
&lt;/code&gt;
由上面的命令可见，&lt;code&gt;*&lt;/code&gt;通配的结果与目录中存在哪些文件有关系，而&lt;code&gt;{ }&lt;/code&gt;的通配结果与目录中存在哪些文件无关。若用&lt;code&gt;{ }&lt;/code&gt;进行通配，则有可能将不存在的文件路径作为命令行参数传给程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;第一式&#34;&gt;第一式：*&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;*&lt;/code&gt;用于通配文件名或目录名中某一部分为任意内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm *.log          # 删除当前目录中所有后缀名为.log的文件
rm */log/*.log    # 删除所有二级log目录中后缀名为.log的文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第二式&#34;&gt;第二式：[ ]&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[ ]&lt;/code&gt;用于通配文件名或目录名中某个字符为限定范围内或限定范围外的值：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
rm Program[1-9]*.log  # 删除当前目录中以Program跟着一个1到9的数字开头，并以.log为后缀名的文件
du -sh /[^udp]*       # 对根目录中所有不以u、d、p开头的文件夹求取总大小
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第三式-1&#34;&gt;第三式：?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;?&lt;/code&gt;用于通配文件名中某处一个任意值的字符：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm L????.txt    # 通配一个文件名以L开头，后面跟着4个字符，并以.txt结尾的文件：如LAB01.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;第四式&#34;&gt;第四式：{ }&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;{ }&lt;/code&gt;也为通配符，用于通配在它枚举范围内的值，由于它是直接展开的，我们可以将它用于批量创建目录或文件，也可以用于生成序列：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;批量生成目录&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[casheywen@ubuntu:~]# ls
[casheywen@ubuntu:~]# mkdir dir{0..2}{0..2}    
[casheywen@ubuntu:~]# ls
dir00  dir01  dir02  dir10  dir11  dir12  dir20  dir21  dir22
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;生成序列&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{ }&lt;/code&gt;生成的序列常用于&lt;a href=&#34;#第一式for&#34;&gt;for循环&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for ip in 192.168.234.{1..255}
do
    ping ${ip} -w 1 &amp;amp;&amp;gt; /dev/null &amp;amp;&amp;amp; echo ${ip} is Alive
done
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;以上例子用于查找&lt;code&gt;192.168.234.1~192.168.234.255&lt;/code&gt;整个网段能&lt;code&gt;ping&lt;/code&gt;通的所有&lt;code&gt;ip&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
        <item>
            <title>Shell常用招式大全-命令篇</title>
            <link>//blog.pytool.com/it/shell/shell%E5%B8%B8%E7%94%A8%E6%8B%9B%E5%BC%8F%E5%A4%A7%E5%85%A8%E5%91%BD%E4%BB%A4%E7%AF%87/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/shell%E5%B8%B8%E7%94%A8%E6%8B%9B%E5%BC%8F%E5%A4%A7%E5%85%A8%E5%91%BD%E4%BB%A4%E7%AF%87/</guid>
            <description>

&lt;p&gt;继上篇《入门篇》之后，本篇《命令篇》为《Shell常用招式大全》的第二篇教程。&lt;/p&gt;

&lt;p&gt;本篇根据本人的工作经验，总结了Linux下一些常用命令的使用技巧。旨在精而不在全，对于百度一下或&lt;code&gt;man&lt;/code&gt;一下即可知道的使用方法不做详细介绍。&lt;/p&gt;

&lt;p&gt;适合在Linux下用过一些命令，小尝甜头，但仍觉得Shell不是那么称手的读者。&lt;/p&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h1 id=&#34;第一招-文本处理&#34;&gt;第一招 文本处理&lt;/h1&gt;

&lt;p&gt;无名氏说：编程有两件事，一件是处理数值，另一件是处理字符串。&lt;/p&gt;

&lt;h2 id=&#34;第一式-cut-切割分列&#34;&gt;第一式 cut 切割分列&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;casheywen@ubuntu:~$ cat test.txt
1 2 3 4 5 6
a b c d e f g h i
apple banana pear peach
casheywen@ubuntu:~$ cat test.txt | cut -f 2 -d &#39; &#39;   # 取出第2列
2
b
banana
casheywen@ubuntu:~$ cat test.txt | cut -f 2,3 -d &#39; &#39;  # 取出第2,3两列
2 3
b c
banana pear
casheywen@ubuntu:~$ cat test.txt | cut -f 3- -d &#39; &#39;   # 取出第3到最后一列
3 4 5 6
c d e f g h i
pear peach
casheywen@ubuntu:~$ cat test.txt | cut -f 3-5 -d &#39; &#39;  # 取出第3~5列
3 4 5
c d e
pear peach
casheywen@ubuntu:~$ cat test.txt | cut -f 3 --complement -d &#39; &#39;  # 取出除第3列外的所有列
1 2 4 5 6
a b d e f g h i
apple banana peach
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从以上示例大家可以明白，&lt;code&gt;cut&lt;/code&gt;是一个列处理命令，功能上可以代替大多数类似&lt;code&gt;awk &#39;{print $1}&#39;&lt;/code&gt;的效果，写起来很方便。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;cut命令的参数:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt; 指定选择的列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; 指定分割符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--complement&lt;/code&gt; 反选，指定后会打印不在&lt;code&gt;-f&lt;/code&gt;中的所有列&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;技一-读取配置文件&#34;&gt;技一: 读取配置文件&lt;/h3&gt;

&lt;p&gt;例如有一个格式如下的配置文件 &lt;code&gt;test.conf&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IP = 192.168.0.1
PORT = 12800
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以用如下命令来读取IP字段：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;casheywen@ubuntu:~$ cat test.conf | grep -w IP | cut -f 2 -d = | xargs
192.168.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
        <item>
            <title>shell中的map使用</title>
            <link>//blog.pytool.com/it/shell/2017-11-07-shell%E4%B8%AD%E7%9A%84map%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/2017-11-07-shell%E4%B8%AD%E7%9A%84map%E4%BD%BF%E7%94%A8/</guid>
            <description>

&lt;p&gt;bash 的版本必须 &amp;gt;= 4.1.2，升级bash：&lt;/p&gt;

&lt;p&gt;declare -A abc
declare: usage: declare [-afFirtx] [-p] [name[=value] &amp;hellip;]&lt;/p&gt;

&lt;h1 id=&#34;shell中map的定义与使用&#34;&gt;shell中map的定义与使用&lt;/h1&gt;

&lt;p&gt;declare -A 变量名 #切记使用大写的A，不是小写的a&lt;/p&gt;

&lt;p&gt;[root@www ~]# declare -A map=([&amp;ldquo;sunjun&amp;rdquo;]=&amp;ldquo;a&amp;rdquo; [&amp;ldquo;jason&amp;rdquo;]=&amp;ldquo;b&amp;rdquo; [&amp;ldquo;lee&amp;rdquo;]=&amp;ldquo;c&amp;rdquo;) #定义时初始化一些值
[root@www ~]# echo ${map[@]}        #输出所有values
a c b
[root@www ~]# echo ${!map[@]}       #输出所有keys
sunjun lee jason&lt;/p&gt;

&lt;p&gt;[root@www ~]# map[&amp;ldquo;hello&amp;rdquo;]=123      #向map中添加一个key=value
[root@www ~]# echo ${map[@]}
a c b 123
[root@www ~]# echo ${!map[@]}
sunjun lee jason hello
[root@www ~]#&lt;/p&gt;

&lt;h1 id=&#34;shell中的数组&#34;&gt;shell中的数组&lt;/h1&gt;

&lt;p&gt;[root@www ~]# declare -a array=(&amp;ldquo;aa&amp;rdquo; &amp;ldquo;bb&amp;rdquo; &amp;ldquo;cc&amp;rdquo;)     #定义一个数组
[root@www ~]# echo ${array[@]}      #输出所有元素的值
aa bb cc
[root@www ~]# echo ${!array[@]}     #输出所有元素的索引
0 1 2&lt;/p&gt;

&lt;p&gt;[root@www ~]# array[100]=&amp;ldquo;hello&amp;rdquo;    #指定索引添加一个元素
[root@www ~]# echo ${array[@]}
aa bb cc hello
[root@www ~]# echo ${!array[@]}
0 1 2 100
[root@www ~]#&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>shell条件判断</title>
            <link>//blog.pytool.com/it/shell/2017-11-07-shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/2017-11-07-shell%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD/</guid>
            <description>

&lt;h2 id=&#34;整数比较&#34;&gt;整数比较&lt;/h2&gt;

&lt;p&gt;-eq 等于      if [ &amp;ldquo;$a&amp;rdquo; -eq &amp;ldquo;$b&amp;rdquo; ]
-ne 不等于    if [ &amp;ldquo;$a&amp;rdquo; -ne &amp;ldquo;$b&amp;rdquo; ]
-gt 大于      if [ &amp;ldquo;$a&amp;rdquo; -gt &amp;ldquo;$b&amp;rdquo; ]
-ge 大于等于  if [ &amp;ldquo;$a&amp;rdquo; -ge &amp;ldquo;$b&amp;rdquo; ]
-lt 小于     if [ &amp;ldquo;$a&amp;rdquo; -lt &amp;ldquo;$b&amp;rdquo; ]
-le 小于等于  if [ &amp;ldquo;$a&amp;rdquo; -le &amp;ldquo;$b&amp;rdquo; ]
&amp;lt; 小于（使用 双圆括号）((&amp;ldquo;$a&amp;rdquo; &amp;lt; &amp;ldquo;$b&amp;rdquo;))
&amp;lt;= 小于等于（使用双圆括号）((&amp;ldquo;$a&amp;rdquo; &amp;lt;= &amp;ldquo;$b&amp;rdquo;))
&amp;gt; 大于（使用双圆括号）((&amp;ldquo;$a&amp;rdquo; &amp;gt; &amp;ldquo;$b&amp;rdquo;))
&amp;gt;= 大于等于（使用双圆括号） ((&amp;ldquo;$a&amp;rdquo; &amp;gt;= &amp;ldquo;$b&amp;rdquo;))&lt;/p&gt;

&lt;h2 id=&#34;字符串比较&#34;&gt;字符串比较&lt;/h2&gt;

&lt;h3 id=&#34;等于-if-a-b-注意-在-前后要加上空格&#34;&gt;= 等于  if [ &amp;ldquo;$a&amp;rdquo; = &amp;ldquo;$b&amp;rdquo; ] 注意: 在=前后要加上空格&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;   if [ &amp;quot;$a&amp;quot;=&amp;quot;$b&amp;quot; ] 和上面不等价。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;等于-if-a-b-和-同义&#34;&gt;== 等于 if [ &amp;ldquo;$a&amp;rdquo; == &amp;ldquo;$b&amp;rdquo; ] 和 = 同义&lt;/h3&gt;

&lt;p&gt;note == 操作符在 双方括号 和单方括号里的功能是不同的。&lt;/p&gt;

&lt;p&gt;[[ $a == z* ]]   # $a 以 &amp;ldquo;z&amp;rdquo; 开头时为真（模式匹配）
[[ $a == &amp;ldquo;z&lt;em&gt;&amp;rdquo; ]] # $a 等于 z&lt;/em&gt; 时为真（字符匹配）&lt;/p&gt;

&lt;p&gt;[ $a == z* ]     # 发生文件匹配和字符分割。
[ &amp;ldquo;$a&amp;rdquo; == &amp;ldquo;z&lt;em&gt;&amp;rdquo; ] # $a 等于 z&lt;/em&gt; 时为真（字符匹配）&lt;/p&gt;

&lt;h3 id=&#34;不等于-if-a-b&#34;&gt;!= 不等于 if [ &amp;ldquo;$a&amp;rdquo; != &amp;ldquo;$b&amp;rdquo; ]&lt;/h3&gt;

&lt;p&gt;在 [[ &amp;hellip; ]] 结构中会进行模式匹配。&lt;/p&gt;

&lt;h3 id=&#34;小于-按照-ascii码-排序&#34;&gt;&amp;lt; 小于，按照 ASCII码 排序。&lt;/h3&gt;

&lt;p&gt;if [[ &amp;ldquo;$a&amp;rdquo; &amp;lt; &amp;ldquo;$b&amp;rdquo; ]]
if [ &amp;ldquo;$a&amp;rdquo; &amp;lt; &amp;ldquo;$b&amp;rdquo; ]&lt;/p&gt;

&lt;p&gt;注意在 [] 结构里 &amp;lt; 需要被 转义。&lt;/p&gt;

&lt;h3 id=&#34;大于-按照-ascii-码排序&#34;&gt;&amp;gt; 大于，按照 ASCII 码排序。&lt;/h3&gt;

&lt;p&gt;if [[ &amp;ldquo;$a&amp;rdquo; &amp;gt; &amp;ldquo;$b&amp;rdquo; ]]
if [ &amp;ldquo;$a&amp;rdquo; &amp;gt; &amp;ldquo;$b&amp;rdquo; ]&lt;/p&gt;

&lt;p&gt;注意在 [] 结构里 &amp;gt; 需要被转义。&lt;/p&gt;

&lt;h3 id=&#34;z-字符串为空-即字符串长度为0&#34;&gt;-z 字符串为空，即字符串长度为0。&lt;/h3&gt;

&lt;p&gt;String=&amp;rdquo;   # 长度为0的字符串变量。&lt;/p&gt;

&lt;p&gt;if [ -z &amp;ldquo;$String&amp;rdquo; ]
then
  echo &amp;ldquo;\$String is null.&amp;rdquo;
else
  echo &amp;ldquo;\$String is NOT null.&amp;rdquo;
fi     # $String is null.&lt;/p&gt;

&lt;h3 id=&#34;n-字符串非空-null-使用-n-时字符串必须是在括号中且被引用的&#34;&gt;-n 字符串非空（null）使用 -n 时字符串必须是在括号中且被引用的。&lt;/h3&gt;

&lt;p&gt;使用 ! -z 判断未引用的字符串或者直接判断（样例 7-6）通常可行，但是非常危险。判断字符串时一定要引用1。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>shell特殊字符</title>
            <link>//blog.pytool.com/it/shell/2017-11-07-shell%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</link>
            <pubDate>Tue, 07 Nov 2017 14:55:34 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/shell/2017-11-07-shell%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6/</guid>
            <description>&lt;p&gt;Shell特殊字符&lt;/p&gt;

&lt;p&gt;下面来看看Shell特殊字符。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;双引号&amp;quot;：用来使Shell无法认出除字符$、`、\之外的任何字符或字符串，也称之为弱引用。

单引号&#39;：用来使Shell无法认出所有的特殊字符，也称之为强引用。

反引号`：优先执行当前命令。

反斜杠\：有两种作用，一种是用来使Shell无法认出其后的字符，使其后的字符失去特殊的含义，如有特殊含义的字符$，也称为转义符。
另外，如果放在指令前，有取消别名的作用，例如在“\rm/home/yhc/*.log”中，rm指令前加上\，作用是暂时取消别名的功能，将rm指令还原。

分号； ：允许在一行上放多个命令。

&amp;amp;     ：将命令放于后台执行，建议带上nohup。

括号() ：创建成组的命令。  新开shell子进程

大括号{}：创建命令块。

&amp;lt;&amp;gt;&amp;amp;    ：重定向。

*? [] !：表示模式匹配。

$      ：变量名的开头。

#      ：表示注释（第一行除外）。

空格、制表符、换行符：当作空白。
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Hugo Shortcode</title>
            <link>//blog.pytool.com/hugo/hugo_shortcode/</link>
            <pubDate>Thu, 05 Oct 2017 10:58:08 -0400</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/hugo/hugo_shortcode/</guid>
            <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Markdown 语法十分简洁，如果想要插入更加复杂的内容就需要直接使用 HTML 代码，比如通过 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 来自定义图片尺寸，通过 &lt;code&gt;&amp;lt;iframes&amp;gt;&lt;/code&gt; 来插入视频。显然这样做，虽然扩展了 Markdown 文档的表达能力，但却牺牲了 Markdown 语法的简洁性，而且插入的 HTML 代码不利于后续对文档的维护和更新。&lt;/p&gt;

&lt;p&gt;问题的关键在于，Markdown 的简洁性本身就意味着它难以用来书写复杂的内容，尤其是涉及到展示效果的内容。Hugo 提供了 shortcode 来解决这一问题，既使内容保持了 Markdown 的简洁性，又允许创作者在文档中嵌入一些 Markdown 不支持的形式复杂的内容。&lt;/p&gt;

&lt;p&gt;简单来说，shortcode 是一些可以直接插入内容文档中的助记符，在 Hugo 生成网站时，会将这些助记符替换为相应的 HTML 代码片段（严格来说是模板片段）。这样的好处在于，在创作内容时，只要了解这些助记符的用法而不必关心它们是如何实现和转换的。另一方面来看，更新助记符对应的 HTML 片段时，内容文档不会受到影响。接下来将分别介绍：如何在内容文档中使用 shortcode ，Hugo 内置了哪些 shortcode 以及如何自定义 shortcode ？&lt;/p&gt;

&lt;h2 id=&#34;用法&#34;&gt;用法&lt;/h2&gt;

&lt;p&gt;Shortcode 语法有些类似 HTML 标记，一个完整的 shortcode 包含以下几个部分&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% shorcodename parameters %}}some content for shortcode template{{% /shortcodename %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;{{% shorcodename parameters %}}&lt;/code&gt; 表示开标记，相应的 &lt;code&gt;{{% /shortcodename %}}&lt;/code&gt; 表示闭标记，闭标记是可选的，同样在开闭标记之间的内容也是可选的。&lt;/p&gt;

&lt;p&gt;开标记中的参数，最终会被传入 shortcode 模板文件中，影响模板的渲染。参数允许以位置参数或命名参数的形式输入（但不能同时传递这两种参数），参数之间用空格间隔，如果参数本身含有空格则需要为其添加双引号。命名参数的格式为 &lt;code&gt;name=&amp;quot;value&amp;quot;&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;除了使用上面的 &lt;code&gt;%&lt;/code&gt; 外，还可以使用 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 来作为 shortcode 的定界符，比如 &lt;code&gt;{{&amp;lt; gist spf13 7896402 &amp;gt;}}&lt;/code&gt; 。后者跟前者的唯一区别在于，包含在开闭标记之间的内容将不会被 Markdown 引擎处理。&lt;/p&gt;

&lt;p&gt;另外，本文中的许多 shortcode 只是用于显示，并不想要被 Hugo 处理，此时需要在 &lt;code&gt;%&lt;/code&gt; 或 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 定界符内侧添加 &lt;code&gt;/*&lt;/code&gt; 和 &lt;code&gt;*/&lt;/code&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;内置-shortcode&#34;&gt;内置 Shortcode&lt;/h2&gt;

&lt;p&gt;Hugo 预先定义了一些较为常用的 shortcode ，下面介绍如何使用以及在什么情形下使用它们，更详细的用法参见&lt;a href=&#34;https://gohugo.io/content-management/shortcodes/&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;高亮&#34;&gt;高亮&lt;/h3&gt;

&lt;p&gt;用来高亮文档中的代码片段，用法样例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; highlight python &amp;gt;}}
def pt(txt):
    print(txt)
{{&amp;lt; /highlight &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;图片&#34;&gt;图片&lt;/h3&gt;

&lt;p&gt;用来扩展 Markdown 中插入图片的语法，该 shortcode 插入的图片支持自定义 CSS 类、添加链接和 caption 等，用法样例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; figure src=&amp;quot;/media/spf13.jpg&amp;quot; title=&amp;quot;Steve Francia&amp;quot; link=&amp;quot;&amp;quot; caption=&amp;quot;&amp;quot; class=&amp;quot;&amp;quot; attr=&amp;quot;&amp;quot; attrlink=&amp;quot;&amp;quot; alt=&amp;quot;&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文档引用&#34;&gt;文档引用&lt;/h3&gt;

&lt;p&gt;根据文档在本地文件系统中的路径，来插入文档的超链接，甚至可以引用文档标题位置，用法样例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Neat]({{&amp;lt; ref &amp;quot;blog/neat.md&amp;quot; &amp;gt;}})
[Who]({{&amp;lt; relref &amp;quot;about.md#who&amp;quot; &amp;gt;}})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;参数为被引用文档的路径，Hugo 会自动将其替换为被引用文档的永久链接（permalink），&lt;code&gt;ref&lt;/code&gt; 和 &lt;code&gt;relref&lt;/code&gt; 的不同之处在于，后者给出相对链接，而前者给出完整链接。以上样例的生成结果如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;a href=&amp;quot;/blog/neat&amp;quot;&amp;gt;Neat&amp;lt;/a&amp;gt;
&amp;lt;a href=&amp;quot;/about/#who:c28654c202e73453784cfd2c5ab356c0&amp;quot;&amp;gt;Who&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;github-代码片段&#34;&gt;GitHub 代码片段&lt;/h3&gt;

&lt;p&gt;用来在文档中插入 GitHub 上创建的代码片段，假设代码片段链接为：&lt;a href=&#34;https://gist.github.com/username/id&#34;&gt;https://gist.github.com/username/id&lt;/a&gt; ，则插入语法如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; gist username id &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;twitter-推文&#34;&gt;Twitter 推文&lt;/h3&gt;

&lt;p&gt;用来在内容中插入一条 tweet ，推文的链接是这样的： &lt;a href=&#34;https://twitter.com/spf13/status/666616452582129664&#34;&gt;https://twitter.com/spf13/status/666616452582129664&lt;/a&gt; ，插入这条推文的 shortcode 如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; tweet 666616452582129664 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;youtube-视频&#34;&gt;YouTube 视频&lt;/h3&gt;

&lt;p&gt;用来在内容中插入 YouTube 视频，YouTube 视频资源链接是这样的： &lt;a href=&#34;https://www.youtube.com/watch?v=w7Ft2ymGmfc&#34;&gt;https://www.youtube.com/watch?v=w7Ft2ymGmfc&lt;/a&gt; ，插入该视频的 shortcode 如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube w7Ft2ymGmfc &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者开启自动播放&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; youtube id=&amp;quot;w7Ft2ymGmfc&amp;quot; autoplay=&amp;quot;true&amp;quot; &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vimeo-视频&#34;&gt;Vimeo 视频&lt;/h3&gt;

&lt;p&gt;同插入 YouTube 视频类似，假设资源链接为：&lt;a href=&#34;https://vimeo.com/channels/staffpicks/146022717&#34;&gt;https://vimeo.com/channels/staffpicks/146022717&lt;/a&gt; ，则插入语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; vimeo 146022717 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;speaker-deck-演示文稿&#34;&gt;Speaker Deck 演示文稿&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/&#34;&gt;Speaker Deck&lt;/a&gt; 是一个允许我们共享演示文稿的地方，我们可以将共享在其上的演示文稿插入到内容文档中，在 Speaker Deck 上点击分享后会生成一段 HTML 代码，假设其中的 &lt;code&gt;data-id=&amp;quot;123456&amp;quot;&lt;/code&gt; ，那么在文档中可以使用如下语法插入该演示文稿&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; speakerdeck 123456 &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;instagram-图片&#34;&gt;Instagram 图片&lt;/h3&gt;

&lt;p&gt;插入 Instagram 上的图片，假设某张图片链接为：&lt;a href=&#34;https://www.instagram.com/p/BMokmydjG-M/&#34;&gt;https://www.instagram.com/p/BMokmydjG-M/&lt;/a&gt; ，则插入该图片的语法为&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; instagram BMokmydjG-M &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; instagram BMokmydjG-M hidecaption &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;自定义-shortcode&#34;&gt;自定义 Shortcode&lt;/h2&gt;

&lt;h3 id=&#34;模板文件位置&#34;&gt;模板文件位置&lt;/h3&gt;

&lt;p&gt;shortcode 的工作机制就是将助记符关联的 HTML 模板片段渲染后插入到文档中。Hugo 支持自定义 shortcode ，需要做的十分简单，只要在模板目录 &lt;code&gt;layouts/shortcodes/&lt;/code&gt; 中创建模板文件即可，模板文件名即为 shortcode 的名称（除去文件名中的扩展名）。&lt;/p&gt;

&lt;p&gt;同时 Hugo 还支持检索主题资源中的 shortcode，因此 shortcode 的查找顺序如下&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/layouts/shortcodes/&amp;lt;SHORTCODE&amp;gt;.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/themes/&amp;lt;THEME&amp;gt;/layouts/shortcodes/&amp;lt;SHORTCODE&amp;gt;.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;模板文件内容&#34;&gt;模板文件内容&lt;/h3&gt;

&lt;p&gt;shortcode 的模板文件就是普通的 Hugo 模板文件。只不过在 shortcode 模板文件内，可以通过模板变量来访问传入 shortcode 的参数和开闭标记之间的内容。以及其它常规模板变量都可以在 shortcode 模板中访问。&lt;/p&gt;

&lt;h4 id=&#34;访问参数&#34;&gt;访问参数&lt;/h4&gt;

&lt;p&gt;虽然在使用 shortcode 时只可以传入位置和命名参数中的一种，但是在设计 shortcode 模板时却可以考虑接受这两种参数（当然不可能同时接受），为此可以通过模板变量 &lt;code&gt;.IsNamedParams&lt;/code&gt; 来判断，当前参数传入是位置的，还是命名的。&lt;/p&gt;

&lt;p&gt;在模板文件中，位置参数和命名参数都可以通过模板方法 &lt;code&gt;.Get&lt;/code&gt; 来访问：&lt;code&gt;{{ .Get 0 }}&lt;/code&gt; 和 &lt;code&gt;{{ .Get &amp;quot;name&amp;quot; }}&lt;/code&gt; 。或者使用 &lt;code&gt;with&lt;/code&gt; 语法来访问 &lt;code&gt;{{ with .Get &amp;quot;class&amp;quot;}}class=&amp;quot;{{.}}&amp;quot;{{ end }}&lt;/code&gt; 。此外还可以通过模板变量 &lt;code&gt;.Params&lt;/code&gt; 来访问参数。&lt;/p&gt;

&lt;h4 id=&#34;访问内容&#34;&gt;访问内容&lt;/h4&gt;

&lt;p&gt;使用 shortcode 时，位于开闭标记之间的内容，在模板文件中可以通过模板变量 &lt;code&gt;.Inner&lt;/code&gt; 来访问。&lt;/p&gt;

&lt;h4 id=&#34;访问父模板&#34;&gt;访问父模板&lt;/h4&gt;

&lt;p&gt;此外 shortcode 还支持嵌套，比如在内容文档中像下面这样插入 shortcode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{&amp;lt; parentshortcode &amp;gt;}}
{{&amp;lt; childshortcode &amp;gt;}}
{{&amp;lt; /parentshortcode &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在模板文件 &lt;code&gt;layouts/shortcodes/childshortcode.html&lt;/code&gt; 中可以通过模板变量 &lt;code&gt;.Parent&lt;/code&gt; 来访问 &lt;code&gt;parendshortcode.html&lt;/code&gt; 的模板环境。&lt;/p&gt;

&lt;p&gt;总之 shortcode 模板文件跟普通的模板文件没有差别，基本就是 HTML 代码跟模板变量的混合体，不过 shortcode 模板除了可以访问常规模板变量外，还可以额外访问几个变量和方法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get 0 }}                    获取位置参数
{{ .Get &amp;quot;name&amp;quot; }}               获取命名参数
{{ with .Get &amp;quot;class&amp;quot;}} &amp;lt;p class=&amp;quot;{{.}}&amp;quot;&amp;gt; haha! &amp;lt;/p&amp;gt;{{ end }}
.Inner                          位于 shortcode 开闭之间的内容
.Params                         输入的参数列表
.IsNamedParams                  判断 shortcode 输入的是位置参数还是命名参数
.Parent                         shortcode 支持继承，该变量表示父 shortcode
.Page                           所有的页面变量在 shortcode 都可用
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;模板样例&#34;&gt;模板样例&lt;/h3&gt;

&lt;p&gt;年份，模板位置 &lt;code&gt;/layouts/shortcodes/year.html&lt;/code&gt; ，内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Page.Now.Year }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;高亮，模板位置 &lt;code&gt;/layouts/shortcodes/highlight.html&lt;/code&gt;，内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ .Get 0 | highlight .Inner  }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;图片，模板位置 &lt;code&gt;/layouts/shortcodes/figure.html&lt;/code&gt;，内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        &amp;lt;h4&amp;gt;{{ .Get &amp;quot;title&amp;quot; }}&amp;lt;/h4&amp;gt;{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YouTube 视频，模板位置 &lt;code&gt;/layouts/shortcodes/youtube.html&lt;/code&gt;，内容：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&amp;quot;embed video-player&amp;quot;&amp;gt;
&amp;lt;iframe class=&amp;quot;youtube-player&amp;quot; type=&amp;quot;text/html&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;385&amp;quot; src=&amp;quot;http://www.youtube.com/embed/{{ index .Params 0 }}&amp;quot; allowfullscreen frameborder=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>Hugo 模板template</title>
            <link>//blog.pytool.com/hugo/hugo_template/</link>
            <pubDate>Thu, 05 Oct 2017 10:58:08 -0400</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/hugo/hugo_template/</guid>
            <description>

&lt;h3 id=&#34;模板变量&#34;&gt;模板变量&lt;/h3&gt;

&lt;p&gt;如果说模板是待填充的网页，则模板变量是用来填充模板的内容。Hugo 内置了许多可以在模板中访问的变量，这些变量可以分为以下几种类型&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;网站变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过网站变量，我们可以访问网站级别的配置和数据。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .Site.BaseURL 			配置文件中为网站指定的 basse URL
  .Site.RSSLink 			网站的 RSS 链接
  .Site.Taxonomies 		网站所有的分类标签
  .Site.Pages				网站所有页面（仅含当前语言）
  .Site.AllPages			网站所有页面（含多语言）
  .Site.Params			配置文件中通过 params 定义的网站参数
  .Site.Sections			网站所有 Section（也即网站的顶级目录）
  .Site.Title				配置文件中为网站指定的 title
  .Site.Author			配置文件中为网站指定的 author
  .Site.Copyright			配置文件中为网站指定的 copyright
  .Site.LastChange		网站最后更新时间，格式跟内容文档头部 date 保持一致
  .Site.Data				网站自定义数据文件的访问接口
  .Site.RegularPages		网站中所有常规页面
  .Site.Files				网站所有源文件
  .Site.Menus				网站所有菜单
  .Site.LanguageCode		配置文件中为网站指定的 language code
  .Site.DisqusShortname	配置文件中为网站指定的 disqus 评论id
  .Site.GoogleAnalytics   配置文件中为网站指定的 google analytics tracking code
  .Site.Permalinks		配置文件中为网站指定的 permalink format
  .Site.BuildDrafts		配置文件中为网站指定的 build drafts
  .Site.IsMultiLingual	网站是否支持多语言
  .Site.Language			配置文件中指定的 language
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;页面变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过页面变量，我们可以访问内容文档级别的配置和数据。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .Title					内容文档的标题
  .Content				内容文档的内容
  .Date					内容文档的日期
  .PublishDate			页面发布日期
  .FuzzyWordCount			内容的近似字数
  .WordCount				内容的字数
  .Type					内容文档的内容类型
  .URL					页面的相对 URL
  .UniqueID				内容文档路径的md5值
  .Weidht					内容文档中定义的排序权重
  .Kind					页面类型
  .Params					内容文档头部定义的任意元数据都可以通过 .Params 来访问（不同定义如何命名，均以字母小写的名字访问）
  						补充：网站变量中也有 .Site.Params 来定义网站参数，一般来说页面参数比网站参数更具体，
  						可以使用模板函数 $.Param &amp;quot;header_image&amp;quot; 来访问网站和页面的同名参数
  .IsHome					页面是否为首页
  .IsPage					是否为常规内容页面
  .Next					下一个页面（根据页面发布日期）
  .Prev					上一个页面（根据页面发布日期）
  .NextInSection			当天Section中的下一个页面（根据页面分布日期）
  .PrevInSection			当天Section中的上一个页面（根据页面分布日期）
  .TableOfContents		页面目录
  .Permalink				页面的永久链接
  .RelPermalink			页面永久链接的相对路径
  .RawContent				页面的 Markdown 内容，当想要在网站中集成https://github.com/gnab/remark时，就需要提取页面的 Markdown 内容了
  .ReadingTime			页面大概需要花费的阅读时间
  .Section				页面所在 Section
  .Summary				页面摘要
  .Truncated				摘要是否截断页面
  .Description			描述
  .Keywords				关键词
  .LinkTitle				链接到当前页面时使用的 title
  .ExpiryDate				页面失效日期
  .Draft					页面是否为草稿
  .IsTranslated			页面是否有多语言版本
  .Translations			页面的多语言页面
  .Lang					语言
  .Language				语言对象
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;文件变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当页面的生成来源于内容文档时，可以访问内容文档文件相关信息。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  .File.Path				内容文档的相对路径，比如：content/posts/first.en.md
  .File.Dir				内容文档所在目录
  .File.LogicalName		内容文档文件名，比如：first.en.md
  .File.TranslationBaseName 内容文档根文件名，比如：first
  .File.Ext				内容文档扩展名，比如：md
  .File.Lang				内容文档的语言
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Hugo 变量&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  .Hugo.Generator			Hugo 版本号的 meta tag，例如：&amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;Hugo 0.15&amp;quot; /&amp;gt;
  .Hugo.Version			Hugo 二进制程序版本号
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模板变量的作用域问题&lt;/p&gt;

&lt;p&gt;单页模板、Section 列表模板以及 Taxonomy 列表模板均可以访问网站变量和页面变量，此外Taxonomy 列表模板可以访问代表其自身的 &lt;code&gt;.Data.Singular&lt;/code&gt; 变量。&lt;/p&gt;

&lt;h3 id=&#34;模板角色&#34;&gt;模板角色&lt;/h3&gt;

&lt;p&gt;模板文件混杂了 HTML 代码和模板标识符，用来设计网页布局的。Hugo 支持 Go 语言的 HTML 模板库来对网站进行布局规划，虽然模板文件本质上没有不同，可 Hugo 结合常用网站布局结构的需要将模板分为了几种角色，下面将依次介绍这些模板角色&lt;/p&gt;

&lt;p&gt;也即页面类型&lt;/p&gt;

&lt;p&gt;page home section taxonomy or taxonomy Term&lt;/p&gt;

&lt;p&gt;rss sitemap robotsTXT 404&lt;/p&gt;

&lt;h4 id=&#34;首页模板&#34;&gt;首页模板&lt;/h4&gt;

&lt;p&gt;Hugo 使用首页模板（homepage template）来渲染网站首页。一般来说网站首页同其它页面具有不一样的风格，因此需要专门为其使用特定的模板进行渲染。Hugo 在生成网站时，通常会依次从下面路径中查找首页模板，将找到的第一个文件作为首页模板：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- /layouts/index.html
- /layouts/_default/list.html
- /layouts/_default/single.html
- /themes/`THEME`/layouts/index.html
- /themes/`THEME`/layouts/_default/list.html
- /themes/`THEME`/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;也即默认首页模板是 &lt;code&gt;index.html&lt;/code&gt; ，当该文件不存在时，依次使用 &lt;code&gt;list.html&lt;/code&gt; 和 &lt;code&gt;single.html&lt;/code&gt; 来充当首页模板。另外首页模板中可以通过模板变量 &lt;code&gt;.Data.Pages&lt;/code&gt; 来访问网站中所有内容文档，通常我们会遍历该变量在首页创建一个文档展示列表，不过Hugo 不会对模板的创建有任何限制，如何定义首页模板完全取决于自己。&lt;/p&gt;

&lt;h4 id=&#34;单页模板&#34;&gt;单页模板&lt;/h4&gt;

&lt;p&gt;Hugo 使用单页模板（single template）来渲染内容文档。换句话说，内容文档的内容将嵌入单页模板设计好的网页结构中，以此生成网页。那么当生成静态网站时，Hugo 会使用哪个单页模板来渲染内容文档呢？Hugo 会依次从下面路径列表中查找可用的单页模板，将找到的第一个单页模板文件作为当前内容文档的渲染模板：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- /layouts/`TYPE`/`LAYOUT`.html
- /layouts/`SECTION`/`LAYOUT`.html
- /layouts/`TYPE`/single.html
- /layouts/`SECTION`/single.html
- /layouts/_default/single.html
- /themes/`THEME`/layouts/`TYPE`/`LAYOUT`.html
- /themes/`THEME`/layouts/`SECTION`/`LAYOUT`.html
- /themes/`THEME`/layouts/`TYPE`/single.html
- /themes/`THEME`/layouts/`SECTION`/single.html
- /themes/`THEME`/layouts/_default/single.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;TYPE&lt;/code&gt; 表示内容文档的类型名称，&lt;code&gt;SECTION&lt;/code&gt; 表示内容文档的 Section ，&lt;code&gt;THEME&lt;/code&gt; 表示主题名称，&lt;code&gt;LAYOUT&lt;/code&gt; 表示内容文档指定的模板名。&lt;code&gt;TYPE&lt;/code&gt; 和 &lt;code&gt;LAYOUT&lt;/code&gt; 可分别通过内容文档头部的 &lt;code&gt;type&lt;/code&gt; （默认跟所在 Section 同名）和 &lt;code&gt;layout&lt;/code&gt; （默认为单页模板）进行设置 ，&lt;code&gt;SECTION&lt;/code&gt; 则由内容文档磁盘路径对应的 Section 决定。&lt;/p&gt;

&lt;p&gt;可以看出 Hugo 默认会先从 &lt;code&gt;TYPE&lt;/code&gt; 和 &lt;code&gt;SECTION&lt;/code&gt; 这些模板目录中查找文档指定的布局 &lt;code&gt;LAYOUT&lt;/code&gt; ，再查找相应的单页模板，然后再从网站源默认的布局目录 &lt;code&gt;_default&lt;/code&gt; 中查找单页模板，最后会查找当前主题的相关布局目录，可见 Hugo 奉行的准则是：先精确查找，再回退默认。&lt;/p&gt;

&lt;p&gt;在单页模板中可以访问网站变量和页面变量以及模板函数，通常我们会将内容文档的内容嵌入到单页模板中，有时也许还想为模板创建一个侧变量用来显示相关信息等，怎样定义单页模板完全取决于自己。&lt;/p&gt;

&lt;p&gt;一般情况下，当我们为网站添加过主题之后，主题都会有单页模板的，如果想要覆盖主题中定义的单页模板，可以在网站源的模板目录下面创建相应的单页模板，或者直接创建单页模板 &lt;code&gt;layouts/_default/single.html&lt;/code&gt; 作为内容文档未找到单页模板时的默认模板。&lt;/p&gt;

&lt;h4 id=&#34;内容视图&#34;&gt;内容视图&lt;/h4&gt;

&lt;p&gt;Hugo 使用内容视图（content views）来以不同于单页模板的方式展示内容文档。比如有时，我们只想要展示文档摘要或者文档列表项而非整个文档，内容视图在此时就特别有用了。&lt;/p&gt;

&lt;p&gt;内容视图也是普通的模板文件，Hugo 查找内容视图时会根据当前文档的内容类型进行查找，也就是说同名的内容视图对不同内容类型渲染效果是不同的。Hugo 会依次从以下路径列表中查找可用的内容视图，将找到的第一个模板文件来作为渲染模板&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- /layouts/`TYPE`/`VIEW`.html
- /layouts/_default/`VIEW`.html
- /themes/`THEME`/layouts/`TYPE`/`VIEW`.html
- /themes/`THEME`/layouts/_default/`view`.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;假定我们要为内容类型 &lt;code&gt;post&lt;/code&gt; 和 &lt;code&gt;project&lt;/code&gt; 分别创建内容视图 &lt;code&gt;li.html&lt;/code&gt;  ，则对应的模板文件路径为：&lt;code&gt;/layouts/post/li.html&lt;/code&gt; 和 &lt;code&gt;/layouts/project/li.html&lt;/code&gt; 。如果我们在网站首页使用如下代码罗列所有文档&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range .Data.Pages }}
{{ .Render &amp;quot;li&amp;quot;}}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中 &lt;code&gt;{{ .Render &amp;quot;li&amp;quot; }}&lt;/code&gt; 表示引用当前内容文档对应内容视图 &lt;code&gt;li.html&lt;/code&gt; （&lt;code&gt;post&lt;/code&gt; 和 &lt;code&gt;project&lt;/code&gt; 使用各自的内容视图文件），在内容视图 &lt;code&gt;li.html&lt;/code&gt; 中可以访问任何页面变量，下面是 &lt;code&gt;li.html&lt;/code&gt; 示例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;li&amp;gt;
&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
&amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;列表模板&#34;&gt;列表模板&lt;/h4&gt;

&lt;p&gt;Hugo 使用列表模板（list template）渲染多个被罗列的内容文档，比如：分类标签页面和 Section 页面通常需要罗列逻辑上从属于该类别的所有文档。值得注意的是，不同于单页文档总是被内容文档填充，列表模板一般却不会被内容文档填充（下文会介绍什么情况下列表模板也会填充内容文档）。&lt;/p&gt;

&lt;p&gt;Hugo 中列表模板常见的应用场景有：Section 列表页、Taxonomy 列表页、Section RSS 以及 Taxonomy RSS等（注：网站首页虽然也是列表页，可因其特殊性，需要使用特定的模板渲染）。这些页面渲染后的 URL 路径分别如下&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Section 列表页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;baseURL/SECTION/&lt;/code&gt; ，例如：&lt;code&gt;http://1.com/post/&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Taxonomy 列表页&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;baseURL/PLURAL/TERM/&lt;/code&gt; ，例如：&lt;code&gt;http://1.com/tags/python/&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Section RSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;baseURL/SECTION/index.html&lt;/code&gt; ，例如：&lt;code&gt;http://1.com/post/index.html&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Taxonomy RSS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;baseURL/PLURAL/TERM/index.html&lt;/code&gt; ，例如：&lt;code&gt;http://1.com/tags/python/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;此外，Hugo 会依次从路径列表中查找可用的列表模板，将找到的第一个列表模板文件来作为渲染模板。以上介绍的常见列表页面的查找路径如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Section 列表
  - /layouts/section/`SECTION`.html
  - /layouts/_default/section.html
  - /layouts/_default/list.html
  - /themes/`THEME`/layouts/section/`SECTION`.html
  - /themes/`THEME`/layouts/_default/section.html
  - /themes/`THEME`/layouts/_default/list.html
- Taxonomy 列表
  - /layouts/taxonomy/`SINGULAR`.html
  - /layouts/_default/taxonomy.html
  - /layouts/_default/list.html
  - /themes/`THEME`/layouts/taxonomy/`SINGULAR`.html
  - /themes/`THEME`/layouts/_default/taxonomy.html
  - /themes/`THEME`/layouts/_default/list.html
- Section RSS
  - /layouts/section/`SECTION`.rss.xml
  - /layouts/_default/rss.xml
  - /themes/`THEME`/layouts/section/`SECTION`.rss.xml
  - /themes/`THEME`/layouts/_default/rss.xml
- Taxonomy RSS
  - /layouts/taxonomy/`SINGULAR`.rss.xml
  - /layouts/_default/rss.xml
  - /themes/`THEME`/layouts/taxonomy/`SINGULAR`.rss.xml
  - /themes/`THEME`/layouts/_default/rss.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从上面模板的查找路径可以看出，Hugo 首先会查找为特定 &lt;code&gt;SECTION&lt;/code&gt; 和 &lt;code&gt;TAXONOMY&lt;/code&gt; 定义的模板文件，如果查找失败，会再查找 Section 和 Taxonomy 通用的模板文件，如果还是找不到就使用 &lt;code&gt;layouts/_defaults/list.html&lt;/code&gt; 和 &lt;code&gt;layouts/_defaults/rss.xml&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;既然知道了列表模板的用途，也知道了模板文件的查找路径，那么列表模板文件中该写些什么呢？列表文件也是一个普通的模板文件，在模板中可以使用任何 Go 内置模板函数，还可以访问网站模板变量和页面模板变量（用于 Taxonomy 的模板还可以访问代表当前分类的变量 &lt;code&gt;.Data.Singular&lt;/code&gt; ）。根据列表模板的用途一般来说会在模板中为内容文档创建一个展示列表，此外也许希望对这个内容文档分类或者剔除某些文档，利用简洁而强大的 Go 模板方法可以自定义任何复杂的列表页面。下面是一个用于 Section 的列表模板示例&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;
        &amp;lt;ul id=&amp;quot;list&amp;quot;&amp;gt;
            {{ range .Data.Pages }}
                {{ .Render &amp;quot;li&amp;quot;}}
            {{ end }}
        &amp;lt;/ul&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;分类模板&#34;&gt;分类模板&lt;/h4&gt;

&lt;p&gt;Hugo 使用分类模板（taxonomy terms template）来渲染当前分类下的所有标签。&lt;/p&gt;

&lt;p&gt;要注意同Taxonomy 列表页相区分，Taxonomy 列表页用来罗列属于某个标签下所有的内容文档，优先查找模&lt;code&gt;/layouts/taxonomy/SINGULAR.html&lt;/code&gt; 作为该标签列表页的模板，且将页面渲染于 &lt;code&gt;baseURL/PLURAL/TERM/&lt;/code&gt; 。而分类模板页面是用来罗列当前分类下所有标签的，优先查找 &lt;code&gt;/layouts/taxonomy/SINGULAR.terms.html&lt;/code&gt; 作为页面模板，且渲染于 &lt;code&gt;baseURL/PLURAL/&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;Hugo 会依次从路径列表中查找可用的模板，将找到的第一个模板文件来作为渲染模板&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.terms.html&lt;/li&gt;
&lt;li&gt;/layouts/_default/terms.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/taxonomy/&lt;code&gt;SINGULAR&lt;/code&gt;.terms.html&lt;/li&gt;
&lt;li&gt;/themes/&lt;code&gt;THEME&lt;/code&gt;/layouts/_default/terms.html&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果以上模板都不存在，Hugo 就不会渲染分类标签页面。换句话说，分类标签页面的渲染也不一定必须单独使用一个模板文件，我们可以在页面侧边栏之类的地方来渲染分类标签（比如：侧边栏实现一个标签云）。&lt;/p&gt;

&lt;p&gt;分类模板中除了可以访问网站变量和页面变量外，还有一些关于分类标签的变量可供我们使用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.Data.Singular						分类的单数名称，比如：tag
.Data.Plural						分类的复数名称，比如：tags
.Data.Pages							属于当前分类的所有页面
.Data.Terms							属于当前分类的所有标签
.Data.Terms.Alphabetical			属于当前分类的所有标签（字母序）
.Data.Terms.ByCount					属于当前分类的所有标签（根据标签下文档数量排序）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下面是一个示例分类模板，该模板罗列出了当前分类下的所有标签，并给出了标签下所有文档的链接&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ partial &amp;quot;header.html&amp;quot; . }}
{{ partial &amp;quot;subheader.html&amp;quot; . }}

&amp;lt;section id=&amp;quot;main&amp;quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1 id=&amp;quot;title&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt;

    {{ $data := .Data }}
    {{ range $key,$value := .Data.Terms.ByCount }}
    &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.LanguagePrefix }}/{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt;{{ $value.Name }}&amp;lt;/a&amp;gt; {{ $value.Count }}&amp;lt;/h2&amp;gt;
    &amp;lt;ul&amp;gt;
    {{ range $value.Pages.ByDate }}
      &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    {{ end }}
    &amp;lt;/ul&amp;gt;
    {{ end }}
  &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{{ partial &amp;quot;footer.html&amp;quot; . }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;片段模板&#34;&gt;片段模板&lt;/h4&gt;

&lt;p&gt;Hugo 使用片段模板（partial template）作为其它模板文件的原材料，比如首页模板、单页模板、列表模板等这些模板通常会使用片段模板来创建。这里之所以将片段模板比作原材料，是因为片段模板通常包含了其它模板中的公共部分，反过来说，我们应该将多个模板中的公共内容分离出来创建片段模板文件，然后可以在其它模板中引用该片段文件。使用片段模板的好处在于，不需要重复定义相同的模板内容，而且片段模板十分有利于主题资源的开发，主题中应该将那些想要让用户覆盖的模板内容单独作为一个片段模板，这样主题的使用者只需要定义相同的片段模板就可以对主题片段模板进行替换，片段模板文件是比普通模板文件更加细粒度的模板内容容器。&lt;/p&gt;

&lt;p&gt;如何创建片段模板呢？Hugo 默认将模板目录 &lt;code&gt;/layouts/partials/&lt;/code&gt; 及其子目录中的模板文件看作片段模板，片段模板的内容如同普通模板一样可以访问各种模板变量和模板函数，不过片段模板可以访问到的模板变量取决于引用该模板时传入了怎样的变量进来（后面会有讲，如何引用片段模板以及如何传递变量到片段模板）。在网站中最为常见的片段模板也许就是网页头和网页脚，因为网页头和网页脚在网站大多数页面中都是相同的，将其分离于片段模板中是明智的选择，假设我们创建了 &lt;code&gt;/layouts/partials/header.html&lt;/code&gt; 和 &lt;code&gt;/layouts/partials/footer.html&lt;/code&gt; 片段模板文件，它们的内容分别为&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html class=&amp;quot;no-js&amp;quot; lang=&amp;quot;en-US&amp;quot; prefix=&amp;quot;og: http://ogp.me/ns# fb: http://ogp.me/ns/fb#&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;

    {{ partial &amp;quot;meta.html&amp;quot; . }}

    &amp;lt;base href=&amp;quot;{{ .Site.BaseURL }}&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt; {{ .Title }} : spf13.com &amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;canonical&amp;quot; href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;
    {{ if .RSSLink }}&amp;lt;link href=&amp;quot;{{ .RSSLink }}&amp;quot; rel=&amp;quot;alternate&amp;quot; type=&amp;quot;application/rss+xml&amp;quot; title=&amp;quot;{{ .Title }}&amp;quot; /&amp;gt;{{ end }}

    {{ partial &amp;quot;head_includes.html&amp;quot; . }}
&amp;lt;/head&amp;gt;
&amp;lt;body lang=&amp;quot;en&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;footer&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;
    &amp;amp;copy; 2013-14 Steve Francia.
    &amp;lt;a href=&amp;quot;http://creativecommons.org/licenses/by/3.0/&amp;quot; title=&amp;quot;Creative Commons Attribution&amp;quot;&amp;gt;Some rights reserved&amp;lt;/a&amp;gt;;
    please attribute properly and link back. Hosted by &amp;lt;a href=&amp;quot;http://servergrove.com&amp;quot;&amp;gt;ServerGrove&amp;lt;/a&amp;gt;.
    &amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/footer&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;

  var _gaq = _gaq || [];
  _gaq.push([&#39;_setAccount&#39;, &#39;UA-XYSYXYSY-X&#39;]);
  _gaq.push([&#39;_trackPageview&#39;]);

  (function() {
    var ga = document.createElement(&#39;script&#39;);
    ga.src = (&#39;https:&#39; == document.location.protocol ? &#39;https://ssl&#39; :
        &#39;http://www&#39;) + &#39;.google-analytics.com/ga.js&#39;;
    ga.setAttribute(&#39;async&#39;, &#39;true&#39;);
    document.documentElement.firstChild.appendChild(ga);
  })();

&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上模板内容除了常规的 HTML 代码外，还出现了像 &lt;code&gt;{{ partial &amp;quot;meta.html&amp;quot; . }}&lt;/code&gt; 这样的模板语句，这条语句在这里的作用是引用片段模板 &lt;code&gt;meta.html&lt;/code&gt; 到当前模板文件中（即 &lt;code&gt;header.html&lt;/code&gt; 片段模板文件），就是说 Hugo 允许我们在片段模板中再次引用片段模板。&lt;/p&gt;

&lt;p&gt;下面让我们研究一下，如何引用一个片段模板文件，引用片段模板的语法为：&lt;code&gt;{{ partial &amp;quot;path/to/file.html&amp;quot; variables }}&lt;/code&gt; ，其中 &lt;code&gt;path/to/file.html&lt;/code&gt; 表示被引用的片段模板文件相对于 &lt;code&gt;/layouts/partials/&lt;/code&gt; 目录的路径，比如想要引用 &lt;code&gt;/layouts/partials/post/sidebar.html&lt;/code&gt; ，则对应的引用路径为 &lt;code&gt;post/sidebar.html&lt;/code&gt; 。其中 &lt;code&gt;variables&lt;/code&gt; 表示要传入片段模板的变量（片段模板除了这些传入的变量，是无法访问其它变量的），通常我们会将代表当前模板内所有变量的 &lt;code&gt;.&lt;/code&gt; 作为 &lt;code&gt;variables&lt;/code&gt; 传入片段模板中。&lt;/p&gt;

&lt;p&gt;有没有想过，很多模板引用相同的片段模板文件，在生成网页时，这些片段模板是不是在每个引用模板中都要重新渲染一次呢？有没有办法减少片段模板的渲染次数，毕竟片段模板生成的网页片段除了根据传入变量不同会有改变外，基本的网页结构是相似的。如果想要让 Hugo 提升片段模板的渲染效率（Hugo 会自动缓存已经渲染好的片段模板供后续使用），可以在引用模板文件时用 &lt;code&gt;partialCached&lt;/code&gt; 来代替 &lt;code&gt;partial&lt;/code&gt; ，并且 Hugo 还支持用户按照类别缓存片段模板，比如： &lt;code&gt;{{ partialCached &amp;quot;footer.html&amp;quot; . .Section }}&lt;/code&gt; 的意思是，为每个 Section 渲染一次 &lt;code&gt;footer.html&lt;/code&gt; 模板。&lt;/p&gt;

&lt;h3 id=&#34;模板调试&#34;&gt;模板调试&lt;/h3&gt;

&lt;p&gt;模板编写中错误在所难免，可以使用模板函数 &lt;code&gt;printf&lt;/code&gt; 调试模板变量，下面是几个常见调试样例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ printf &amp;quot;%#v&amp;quot; . }}
{{ printf &amp;quot;%#v&amp;quot; $.Site }}
{{ printf &amp;quot;%#v&amp;quot; .Permalink }}
{{ range .Data.Pages }}
    {{/* The context, &amp;quot;.&amp;quot;, is now a Page */}}
    {{ printf &amp;quot;%#v&amp;quot; . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        
        <item>
            <title>jira</title>
            <link>//blog.pytool.com/it/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/jira/</link>
            <pubDate>Wed, 04 Oct 2017 04:15:26 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/jira/</guid>
            <description>&lt;p&gt;docker exec -i mariadb mysql -uroot -p -e &amp;ldquo;GRANT ALL PRIVILEGES ON jira.* TO &amp;lsquo;jira&amp;rsquo;@&amp;lsquo;%&amp;rsquo; IDENTIFIED BY &amp;lsquo;jira2017&amp;rsquo;; FLUSH PRIVILEGES;&amp;rdquo;
docker exec -i mariadb mysql -ujira -pjira2017 -e &amp;ldquo;CREATE DATABASE IF NOT EXISTS jira DEFAULT CHARSET utf8 COLLATE utf8_general_ci;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;docker run -d &amp;ndash;restart=always &amp;ndash;name jira -p 8080:8080 rinetd/jira&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>基于主干的开发(TBD) Trunk Based Development</title>
            <link>//blog.pytool.com/it/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E5%B9%B2%E7%9A%84%E5%BC%80%E5%8F%91tbd-trunk-based-development/</link>
            <pubDate>Wed, 04 Oct 2017 04:15:26 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/it/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91/%E5%9F%BA%E4%BA%8E%E4%B8%BB%E5%B9%B2%E7%9A%84%E5%BC%80%E5%8F%91tbd-trunk-based-development/</guid>
            <description>&lt;p&gt;Trunk Based Development，缩写为TBD，中文就是基于主干的开发。&lt;/p&gt;

&lt;p&gt;什么是TBD，无需太多文字，看下图即可（来源&lt;a href=&#34;http://paulhammant.com/2013/04/05/what-is-trunk-based-development/）：&#34;&gt;http://paulhammant.com/2013/04/05/what-is-trunk-based-development/）：&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;有人反映看不大懂，好吧，我懒得码字，引用一段TBD的说明文字（来源&lt;a href=&#34;http://nedwu13.blogspot.kr/2014/01/tbd-what-is-trunk-based-development.html），下面这三句话是关键点：&#34;&gt;http://nedwu13.blogspot.kr/2014/01/tbd-what-is-trunk-based-development.html），下面这三句话是关键点：&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;同一个产品开发的所有人员共享一个Repository，有一个trunk，单一Developer或是Developer团队可以有自己的private branch，所有修改最后都会回到主干
   只有在Release时才会有官方的分支，一般Developer不能对Release Branch作动作，只有Release Engineer可以更动Release Branch，当Release Branch完成它的任务，就会被砍掉
   Bug先在trunk修好，之後把Commit合併到Release Branch，而不是在Release Branch修好再整合到trunk，這樣可以把修改Release Branch的人限制在最小程度。&lt;/p&gt;

&lt;p&gt;感谢nedwu13的翻译。&lt;/p&gt;

&lt;p&gt;版本管理策略无非两种：基于主干的Trunk Based和基于分支的Feature Branching，而Feature Branching又可以细分为Release Feature Branching、Integration Feature Branching和Build Feature Branching，不管哪种Feature Branching，在DevOps文化里，皆为妖魔鬼怪，存在的主要问题为：&lt;/p&gt;

&lt;p&gt;一个功能模块，或者说是Feature，会存在多个分支上，那么好了，想改点东西，先要知道这个Feature存在在哪几个分支上，然后挨个看一遍，哪个需要改、哪个不需要改，要改的东西可能还不一样，改完了还要挨个测试一遍
   合并困难，那么多分支，分支到主干、主干到分支，多路双向合并，想想都头大，所以一般就不合并了，挨个改一遍好了&lt;/p&gt;

&lt;p&gt;三种基于分支的版本管理策略详解，参见链接 &lt;a href=&#34;http://www.alwaysagileconsulting.com/articles/version-control-strategies/&#34;&gt;http://www.alwaysagileconsulting.com/articles/version-control-strategies/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;讀過了Perforce官方的mainline model的文件，又看到Google與Facebook都使用TBD，以及我自己在開發上遇到的問題，讓我想看看TBD到底如何可以幫助我們解決這些工程上的問題，看起來作者非常反對feature branch，而我自己親身經歷的感受也的確，要開feature branch，除非能做到Perforce官方推薦的經營方式，不然不只Merge會有災難，開發時也是災難連連。以人性角度來說，假設我做componentA，如果有10個feature branch都有componentA，那每個branch有問題我都要去看，我修了一個componentA的問題，由於每個branch分支出去的時間點不同，其它branch有的可能有，有的可能沒有這個問題，那我怎辦，只能等著人家來報問題，那我的時間很多都花在解這些Branch的問題上。如果採用的是TBD的概念，我只要保證trunk沒問題就可以了。或許在code撰寫方式上需要花很多工，但是我只需一次工，也可以將焦點集中在一個地方。對於我這種普通人，這是比較人性化的工作方式。&lt;/p&gt;

&lt;p&gt;甚麼是TBD&lt;/p&gt;

&lt;p&gt;一個軟體開發的分支模型，也被稱作mainline
   同一個產品開發的所有人員共享一個Repository，有一個trunk，單一Developer或是Developer團隊可以有自己的private branch，所有修改最後都會回到主幹
   只有在Release時才會有官方的分支，一般Developer不能對Release Branch作動作，只有Release Engineer可以更動Release Branch，當Release Branch完成它的任務，就會被砍掉。
   Google與Facebook都採用這種分支模型&lt;/p&gt;

&lt;p&gt;有需要Release才Branch&lt;/p&gt;

&lt;p&gt;Release之後的branch，就不會有大的更動，只有Release Engineer會進行將挑選Commit合併到Release Branch的動作
   多一個Release Engineer的帽子
   Bug先在trunk修好，之後把Commit合併到Release Branch，而不是在Release Branch修好再整合到trunk，這樣可以把修改Release Branch的人限制在最小程度。&lt;/p&gt;

&lt;p&gt;Developer的責任&lt;/p&gt;

&lt;p&gt;每個Developer都要保證Build會成功
   Google與Facebook在新進員工訓練下很多工夫在這上面。一開始沒生產沒關係，但是不要讓公司產品Build不出來！
   Rollback/revert是最後不得已的策略
   複雜產品或是大公司都會有一堆Pre-Commit認證。
   Developer應該養成習慣，證明Commit是沒問題的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Commit之前把Code更新到最新
   以最新的狀態將整個產品重Build一次
   確認更改到的功能無誤(當然關聯的功能也要確認一下)
   Commit，總算搞定，休息一下
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;當某個功能花太長時間才能開發完&lt;/p&gt;

&lt;p&gt;使用Branch By Abstraction (2013重提)
   避免Branch到處開，最後整合不回來&lt;/p&gt;

&lt;p&gt;什麼不是TBD
TBD Quick cheklist&lt;/p&gt;

&lt;p&gt;Developer幾乎只commit到單一trunk
   Release Engineer創建Release Branches, 幾乎只把Commit整合到Release Branch
   用「幾乎只」來形容是因為如果bug無法在trunk重現(有可能是相關的code已被改變)，那Developer就要在Release Branch上修正，然後把Commit整合到trunk。&lt;/p&gt;

&lt;p&gt;如果應用Release Branch的概念，請記住：&lt;/p&gt;

&lt;p&gt;TBD代表Developer不能Commit到Release Branch
   TBD代表你將會刪除不再使用的Release Branches，不會做任何整合回trunk的動作&lt;/p&gt;

&lt;p&gt;Developer需要Commit到多個Branch&lt;/p&gt;

&lt;p&gt;當然不是TBD
   如果想要Branch，請使用Branch by Abstraction
   老鳥總是會說有Special Case需要Branch
   重點就是合併的複雜度，10個Branch，每個人都在那邊Commit來Commit去，有些相關，有些不相關，有些Commit到2個Branch，有些Commit到1個Branch。這我超有感，我們團隊面臨到的狀況正是如此。
   To Branch or Not to Branch?這是已經被爭論許久的問題。
   作者說除了Release Branch之外，不應該有任何Branch在共用的Repository上，但是Developer或是Developer團隊可以有自己的Private Branch。
   就算Feature需要花很長的時間做而且沒時間花在整合上，還是不應該Branch by Feature，應該使用Branch by Abstraction。我們團隊遇到大Feature就會開一個Branch，由於這種Featrue Branch沒人經營，Feature開發中後期，就會花很多時間在整合，而複雜度隨著Commit數量增加越來越複雜，最後只要提到要整合回mainline，每個人的態度都是把一切交給命運。&lt;/p&gt;

&lt;p&gt;沒有在Branch上作持續整合&lt;/p&gt;

&lt;p&gt;不是TBD
   很多Open Source的Developer聲稱沒有持續整合也不會怎樣，作者建議有10個以上的Developer就應該要做持續整合。個人認為就算1個也應該做，誰敢說自己完全不會改壞自己的Code。&lt;/p&gt;

&lt;p&gt;手動管理Component Dependency版號&lt;/p&gt;

&lt;p&gt;對外來的Component，通常都是用外面已經Build好的穩定版本，版號是固定的，可以直接寫Build管理檔案內(例如makefile，Maven的pom.xml)
   對於內部的Component，自己手動指定該Build所需的Component版號(Ex:1.1.2之類)，很容易造成不知到哪個版本的產品該用哪個版本的Component，要嘛就是把Code拉近Product Dir裡面全部Compnent都Build新的，要嘛就是根據Perforce或SVN的Revision Number，或是用Jenkins產的Build Number。手動是複雜度的地獄。&lt;/p&gt;

&lt;p&gt;範例：
Perforce或SVN的架構
trunk&lt;/p&gt;

&lt;p&gt;component1
   component2
   component3
   component4
   productA
   productB&lt;/p&gt;

&lt;p&gt;release
private&lt;/p&gt;

&lt;p&gt;productA用到component1，component3
productB用到component2，component4&lt;/p&gt;

&lt;p&gt;要Build productA，CI可以先build component1，component2，然後build productA，但因為可能component1不斷開發，已經到了reversion=1500，而productA不需要reversion=1234後續開發的功能，就可選擇從component1的reversion=1234抓code過來build。或是直接把compoent1的reversion=1234的code放到到productA底下，目錄架構就會變成
trunk
    component1
    component2
    productA
         component1
         component2
在Perforce有Module這個概念可以應用，History也會留存。&lt;/p&gt;

&lt;p&gt;CI不是從Root開始Build&lt;/p&gt;

&lt;p&gt;CI在Build所有的Component都應該重新開始Build，不可以有任何的快取，或是已經Build好的Component，因為這樣無法反應code的最新狀態。&lt;/p&gt;

&lt;p&gt;用詞不當
Mainline意指其他事物
基本上Mainline就是指TBD，不過在1993年的ClearCase，它的mainline長的如下圖：&lt;/p&gt;

&lt;p&gt;這是一個非常花時間的Branch Model，它的精神就是最後才整合，與TBD的早期整合正好相反。
上圖的劇本：&lt;/p&gt;

&lt;p&gt;mainline開發一段時間，Branch出1.1.x
   mainline繼續開發，1.1.x也繼續開發
   接下來1.1.0要Release，即將合併回mainle，maineline因為要開發1.2.x，害怕1.1.0整合進來會很亂，所以先Branch出1.2。
   1.1.x功能告一段落，1.1.0Release，此時合併回mainline，由於mainline的code已經不太相同，合併就是災難。
   1.2繼續開發，mainline繼續處理混亂狀態
   1.1.1Release，因為1.2需要有1.1的功能，所以又要合併回mainline，剛處理好混亂狀態的mainline要再處理一次混亂
   mainline處理完混亂，開始合併到1.2.x，因為兩個branch長得又不太一樣，所以又是災難
   1.2處理完mainline下來的混亂之後，終於可以Release 1.2.0&lt;/p&gt;

&lt;p&gt;可以看到，每次合併都是一場災難，而這個災難的次數還真不少。其實我們也是使用這個方式，由於有兩個以上的新版本同時開發，branch出去，branch執行有問題也不知道找誰修，要再回到mainline又是一堆工，雖然Branch by Abstraction不見得是萬靈丹，但作者提出的問題我已經有親身體會。&lt;/p&gt;

&lt;p&gt;Feature Toggle
Martin Flower歸納出來的名詞，這個技巧是對一些已實作或是實作中，但還不想開放的功能，目前有些人以為這是與TBD一起用的，其實不然，這招早就存在，分為以下兩種&lt;/p&gt;

&lt;p&gt;Toggles at runtime，執行時期判斷旗標，看要不要開放此功能。
   Toggles at build time，建置時間判斷建置參數，看要不要把功能相關程式碼build進去。&lt;/p&gt;

&lt;p&gt;不管如何，CI Server可以很好地對應這種需求&lt;/p&gt;

&lt;p&gt;Branching is not the problem, merging is the problem
這就是TBD所想要解決的問題，Branch很方便，不是毒蛇猛獸，但是要如何管理好Branch，就是軟體工程的奧妙之處。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Hugo 中的 Markdown 语法</title>
            <link>//blog.pytool.com/hugo/hugo_markdown/</link>
            <pubDate>Wed, 06 Sep 2017 10:58:08 -0400</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/hugo/hugo_markdown/</guid>
            <description>

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;Hugo 中用于书写的标记语言主要是 Markdown。Markdown 作为一门标记语言，其核心&lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34; title=&#34;Markdown Syntax&#34;&gt;语法&lt;/a&gt;十分精炼易用，有许多优秀的 Markdown 解释器可以将 Markdown 文档转换为 HTML 等便于阅览的文档。Markdown 的巨大优势在于，将内容创作和内容展示剥离开来，给予内容创作者极大的自由。&lt;/p&gt;

&lt;p&gt;不过 Markdown 的核心语法十分精炼，甚至某些功能是不被支持，比如任务列表。为此开发者们，开发出众多解释器来扩展 Markdown 核心语法。Hugo 支持两个 Markdown 扩展语法（解释器）：&lt;a href=&#34;https://github.com/russross/blackfriday&#34; title=&#34;Blackfriday Markdown&#34;&gt;Blackfriday&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/miekg/mmark&#34; title=&#34;Mmark Markdown&#34;&gt;Mmark&lt;/a&gt;。可以将 Blackfriday 看成是对基本 Markdown 语法的简单扩展，Mmark 是 Markdown 语法的超集。Hugo 通过文档后缀名或者文档头 Front Matter &lt;code&gt;markup&lt;/code&gt; 来识别这两类 Markdown 文档。Blackfriday Markdown 文档后缀名为 &lt;code&gt;.md&lt;/code&gt; 或者 &lt;code&gt;markup=&amp;quot;markdown&amp;quot;&lt;/code&gt; ，Mmark Markdown 文档后缀名为 &lt;code&gt;.mmark&lt;/code&gt; 或者 &lt;code&gt;markup=&amp;quot;mmark&amp;quot;&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&#34;配置-markdown-解释器&#34;&gt;配置 Markdown 解释器&lt;/h2&gt;

&lt;p&gt;Hugo 允许我们配置解释器，来扩展 Markdown 语法，改变解释器的工作过程。由于 Mmark 是 Markdown 语法的超集，语言本身就支持许多特色功能，是无需通过配置来扩展的，因此这里所说的配置是针对 Blackfriday 解释器而言的。更多关于 Mmark 语法参见&lt;a href=&#34;https://miek.nl/2016/March/05/mmark-syntax-document/&#34; title=&#34;Mmark Syntax&#34;&gt;此处&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;如何配置&#34;&gt;如何配置&lt;/h3&gt;

&lt;p&gt;既可以对解释器进行全局配置，也可以针对一个文档进行配置。全局配置是通过在网站配置文件中添加 &lt;code&gt;blackfriday&lt;/code&gt; 配置项来实现的，而针对文档的配置是通过文档头 Front Matter 中添加 &lt;code&gt;blackfriday&lt;/code&gt; 配置项来实现的，且后者配置的优先级高于前者。&lt;/p&gt;

&lt;p&gt;配置项 &lt;code&gt;blackfriday&lt;/code&gt;  又由许多配置子项组成的，因此 &lt;code&gt;blackfriday&lt;/code&gt; 的配置内容会被写为一个分组，下面分别用 TOML 和 YAML 语法来做样例：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[blackfriday]
  angledQuotes = true
  fractions = false
  plainIDAnchors = true
  extensions = [&amp;quot;hardLineBreak&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;blackfriday:
  angledQuotes: true
  fractions: false
  plainIDAnchors: true
  extensions:
    - hardLineBreak
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不论是全局配置还是针对文档的配置，只要添加以上配置内容就可以改变 Markdown 解释器的行为。&lt;/p&gt;

&lt;h3 id=&#34;常用配置项&#34;&gt;常用配置项&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;taskLists&lt;/code&gt;，默认为 &lt;code&gt;true&lt;/code&gt; 。控制是否支持 Github 风格的任务列表语法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smartypants&lt;/code&gt;，默认为 &lt;code&gt;true&lt;/code&gt;。控制是否开启标点符号（双引号、分子符号、连字符）的转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;angledQuotes&lt;/code&gt;，默认为 &lt;code&gt;false&lt;/code&gt;。控制是否将中文双引号 &lt;code&gt;“hugo”&lt;/code&gt; 转换为 &lt;code&gt;«hugo»&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fractions&lt;/code&gt;，默认为 &lt;code&gt;true&lt;/code&gt;。控制是否将分子式 &lt;code&gt;5/7&lt;/code&gt; 转换为 HTML 格式 &lt;code&gt;&amp;lt;sup&amp;gt;5&amp;lt;/sup&amp;gt;&amp;amp;frasl;&amp;lt;sub&amp;gt;7&amp;lt;/sub&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smartDashes&lt;/code&gt; 和 &lt;code&gt;latexDashes&lt;/code&gt; 共同控制多个连字符如何转换为 &lt;code&gt;–&lt;/code&gt; 和 &lt;code&gt;—&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hrefTargetBlank&lt;/code&gt;，默认为 &lt;code&gt;false&lt;/code&gt;。控制打开外部链接时是否打开新的浏览器窗口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plainIDAnchors&lt;/code&gt;，默认为 &lt;code&gt;true&lt;/code&gt;。不向标题内容添加文档 ID。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extensions&lt;/code&gt;，是列表项。包含于该列表中的 Blackfriday Markdown 扩展语法标识，将开启对应的扩展语法的支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extensionsmask&lt;/code&gt;，是列表项。包含于该列表中的 Blackfriday Markdown 扩展语法标识，将关闭对应的扩展语法的支持。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;扩展语法支持&#34;&gt;扩展语法支持&lt;/h3&gt;

&lt;p&gt;Hugo 的 Blackfriday 解释器扩展了核心的 Markdown 语法，下面将介绍一些常用的扩展语法，更多扩展参见&lt;a href=&#34;https://gohugo.io/getting-started/configuration/#blackfriday-extensions&#34; title=&#34;Blackfriday Markdown Extensions&#34;&gt;官网&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;禁止解析单词内的下划线&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;noIntraEmphasis&lt;/code&gt;，默认开启该扩展。由于 &lt;code&gt;_&lt;/code&gt; 字符是 Markdown 语法的组成部分，所以如果代码中出现类似 &lt;code&gt;init_priority_list&lt;/code&gt; 这样的内容，将会被误当成 Markdown 语法来解析。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;开启对表格语法的支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;tables&lt;/code&gt;，默认开启该扩展。表格语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;     Name | Age
  --------|------
      Bob | 27
    Alice | 23
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;代码块&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;fencedCode&lt;/code&gt;，默认开启该扩展。代码块语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;  ​```markdown
  # h1
  # h2
  ​```
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;自动转换 URL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;autolink&lt;/code&gt;，默认开启该扩展。将内容中那些没有使用 Markdown 语法书写的 URL，转换为 Markdown 格式的 URL。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;删除线&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;strikethrough&lt;/code&gt;，默认开启该扩展。删除线使用两个波浪线的语法 &lt;code&gt;~~删除线~~&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;强制换行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;hardLineBreak&lt;/code&gt;，默认关闭该扩展。默认的 Markdown 语法中，没有用空行间隔开的多行内容最终会被转换为一行内容来输出。开启该扩展后，内容中只要有换行，输出中就会换行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tab 空格数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;tabSizeEight&lt;/code&gt;，默认关闭该扩展。开启该扩展后，每个制表符 Tab 将被转换为 8 个空格（默认是 4 个）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;脚注&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;footnotes&lt;/code&gt;，默认开启该扩展。支持 Pandoc 风格的脚注语法，样例如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;  文章里有一个脚注[^1]

  定义在文档尾部的脚注内容如下
  [^1]: 这里是脚注的内容
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;标题 ID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;headerIds&lt;/code&gt;，默认开启该扩展。允许通过 &lt;code&gt;{#id}&lt;/code&gt; 来为标题指定 ID。此外还有另外一个扩展标识 &lt;code&gt;autoHeaderIds&lt;/code&gt;，用来控制是否自动为标题创建 ID。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;定义列表&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;扩展语法标识为：&lt;code&gt;definitionLists&lt;/code&gt;，默认开启该扩展。定义列表的语法如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;  汽车
  : 汽车是一种机动车

  铁
  : 铁是广泛存在于自然界的一种常见元素，铁的冶炼和制作对现代工业革命中关键性的作用
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;其它标记语言&#34;&gt;其它标记语言&lt;/h2&gt;

&lt;p&gt;除了 Markdown 语言外，Hugo 还支持 Emacs Org-Mode 语言（文档后缀名为 &lt;code&gt;.org&lt;/code&gt; 或者 &lt;code&gt;markup=&amp;quot;org&amp;quot;&lt;/code&gt;）。此外 Hugo 还可以通过外部程序来支持其它标记语言，比如：&lt;a href=&#34;http://asciidoctor.org/&#34; title=&#34;Asciidoc&#34;&gt;Asciidoc&lt;/a&gt;, &lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34; title=&#34;reStructuredText&#34;&gt;reStructuredText&lt;/a&gt; 等。要使用这些标记语言来书写文档也十分简单，只要将文档的扩展名，命名为该标记语言标准的扩展名即可。Hugo 在生成静态网站时就会自动调用相应标记语言的解释器来渲染它们。当然，前提是已经在电脑上安装好了这些解释器。&lt;/p&gt;

&lt;h2 id=&#34;数学公式显示&#34;&gt;数学公式显示&lt;/h2&gt;

&lt;p&gt;可以借助一款 Javascript 函数库 &lt;a href=&#34;http://www.mathjax.org/&#34; title=&#34;MathJax&#34;&gt;MathJax&lt;/a&gt; 来显示嵌入在 HTML 文档中 LaTex 风格的数学公式。&lt;/p&gt;

&lt;h3 id=&#34;添加-mathjax-到模板中&#34;&gt;添加 MathJax 到模板中&lt;/h3&gt;

&lt;p&gt;为了可以在所有页面中显示数学公式，建议将使用 MathJax 的代码添加到被所有页面包含的模板文件中，比如 &lt;code&gt;footer.html&lt;/code&gt; 模板文件中。使用 MathJax 的代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除了上面这种方式使用 MathJax 外，还有&lt;a href=&#34;http://docs.mathjax.org/en/latest/configuration.html&#34; title=&#34;MathJax Loading&#34;&gt;其它方式&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;markdown-和-mathjax-的冲突&#34;&gt;Markdown 和 MathJax 的冲突&lt;/h3&gt;

&lt;p&gt;任何 MathJax 可以解析的数学公式&lt;a href=&#34;https://docs.mathjax.org/en/latest/start.html#putting-mathematics-in-a-web-page&#34; title=&#34;MathJax Syntax&#34;&gt;语法&lt;/a&gt;，都可以直接书写在 Markdown 文档中，在 Markdown 引擎将 Markdown 文档解析为 HTML 后，MathJax 会负责解析 HTML 文档中数学公式语法。&lt;/p&gt;

&lt;p&gt;不过这里有两个问题需要注意：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;下划线 &lt;code&gt;_&lt;/code&gt; 同时是 Markdown 语法和数学公式语法的组成部分。解析 Markdown 文档时，文档中所有 &lt;code&gt;_&lt;/code&gt; 语法会被处理，甚至在数学公式中使用的 &lt;code&gt;_&lt;/code&gt; 也会被处理。而 Markdown 引擎处理了数学公式中的 &lt;code&gt;_&lt;/code&gt; ，将导致数学公式显示时出错。&lt;/li&gt;
&lt;li&gt;MathJax 要显示 HTML 文档中的数学公式，就需要某种机制来查找到这些数学公式代码。MathJax 是通过数学公式的定界符来查找数学公式的，并且支持自定义定界符。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要解决 Mathdown 和 MathJax 对下划线解析的冲突问题，一种直观的方案是将 Markdown 文档中数学公式中的 &lt;code&gt;_&lt;/code&gt; 转义为 &lt;code&gt;\_&lt;/code&gt; 。Markdown 引擎处理过后，&lt;code&gt;\_&lt;/code&gt; 将会被转换为 &lt;code&gt;_&lt;/code&gt; ，因此数学公式语法是有效的。不过该方案一来要插入许多转义符，二来使得 Markdown 文档中书写的数学公式不直观。&lt;/p&gt;

&lt;p&gt;另外一种解决下划线冲突的方案是，使用 HTML 标签 &lt;code&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt; 来将数学代码包含在内，由于 Markdown 引擎不会处理包含在 HTML 标签中的内容，因此 Markdown 引擎也就不会解析数学代码中的下划线了。不过这只适用于块级数学公式（即独立成行的数学公式），并不适用于行内数学公式（即嵌套在行内的数学公式），对于行内数学公式可以使用 Markdown 中的行内代码语法来包裹起来，这样 Markdown 引擎就不会处理里面的内容了，不过由于行内代码的显示样式跟普通文本不一样，所以需要利用 CSS 代码来将其更改为正常的文本样式，具体&lt;a href=&#34;http://doswa.com/2011/07/20/mathjax-in-markdown.html&#34; title=&#34;Markdown and MathJax&#34;&gt;方法&lt;/a&gt;如下：&lt;/p&gt;

&lt;p&gt;添加 Javascript 代码到所有页面中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
MathJax.Hub.Config({
  tex2jax: {
    inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]],
    displayMath: [[&#39;$$&#39;,&#39;$$&#39;], [&#39;\[&#39;,&#39;\]&#39;]],
    processEscapes: true,
    processEnvironments: true,
    skipTags: [&#39;script&#39;, &#39;noscript&#39;, &#39;style&#39;, &#39;textarea&#39;, &#39;pre&#39;],
    TeX: { equationNumbers: { autoNumber: &amp;quot;AMS&amp;quot; },
         extensions: [&amp;quot;AMSmath.js&amp;quot;, &amp;quot;AMSsymbols.js&amp;quot;] }
  }
});
&amp;lt;/script&amp;gt;

&amp;lt;script type=&amp;quot;text/x-mathjax-config&amp;quot;&amp;gt;
  MathJax.Hub.Queue(function() {
    // Fix &amp;lt;code&amp;gt; tags after MathJax finishes running. This is a
    // hack to overcome a shortcoming of Markdown. Discussion at
    // https://github.com/mojombo/jekyll/issues/199
    var all = MathJax.Hub.getAllJax(), i;
    for(i = 0; i &amp;lt; all.length; i += 1) {
        all[i].SourceElement().parentNode.className += &#39; has-jax&#39;;
    }
});
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加 CSS 代码到所有页面中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;code.has-jax {
    font: inherit;
    font-size: 100%;
    background: inherit;
    border: inherit;
    color: #515151; /* 应该设置为跟 body 标签一样的颜色 */
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终在 Markdown 文档中书写块级数学公式的语法为：&lt;code&gt;&amp;lt;div&amp;gt;$$TeX Code$$&amp;lt;/div&amp;gt;&lt;/code&gt;，行内数学公式的语法为：&lt;code&gt;&lt;code&gt;$ TeX Code $&lt;/code&gt;&lt;/code&gt; 或 &lt;code&gt;&lt;code&gt;\( TeX Code \)&lt;/code&gt;&lt;/code&gt;。&lt;/p&gt;
</description>
        </item>
        
        <item>
            <title>Hugo 文档处理</title>
            <link>//blog.pytool.com/hugo/hugo_sort/</link>
            <pubDate>Tue, 15 Aug 2017 10:58:08 -0400</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/hugo/hugo_sort/</guid>
            <description>&lt;h3 id=&#34;文档排序&#34;&gt;文档排序&lt;/h3&gt;

&lt;p&gt;当在列表页面展示多篇文档时，就涉及到文档先后顺序的问题了。Hugo 中文档默认是以元信息 &lt;code&gt;weight&lt;/code&gt; 来排序，当文档未指定 &lt;code&gt;weight&lt;/code&gt; 时，就以元信息 &lt;code&gt;date&lt;/code&gt; 来排序，如果这两项都没有指定的话，列表页面看到的文档就是无序的。&lt;/p&gt;

&lt;p&gt;不过除了上面 &lt;code&gt;weight&lt;/code&gt; 和 &lt;code&gt;date&lt;/code&gt; 外，Hugo 还支持我们以更多方式来排序列表页面，我们需要在列表模板文件中使用以下一些模板变量来控制文档的排序&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按照元信息权重和日期排序（默认排序方式）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages }}
  &amp;lt;li&amp;gt;
  &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
  &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
  &amp;lt;/li&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照元信息日期排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByDate }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照发布日期排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByPublishDate }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照失效日期排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByExpiryDate }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照修改日期排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByLastmod }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照文档内容长度排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByLength }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照文档标题排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByTitle }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照链接标题排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByLinkTitle }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照其它元信息排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range (.Date.Pages.ByParam &amp;quot;author.last_name&amp;quot;) }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;反转排序（以上所有排序都可反转）&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.ByTitle.Reverse }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;除此之外，文档还可以按照分类进行排序，而分类标签本身可以按照标签字母序来排序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ $data := .Data }}
{{ range $key, $value := .Data.Taxonomy.Alphabetical }}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.LanguagePrefix }}/{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者按照关联到该分类标签的文档数量排序（即按照分类的热门程度排序）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
{{ $data := .Data }}
{{ range $key, $value := .Data.Taxonomy.ByCount }}
&amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;{{ .Site.LanguagePrefix }}/{{ $data.Plural }}/{{ $value.Name | urlize }}&amp;quot;&amp;gt; {{ $value.Name }} &amp;lt;/a&amp;gt; {{ $value.Count }} &amp;lt;/li&amp;gt;
{{ end }}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;属于某个分类的文档默认按照 &lt;code&gt;weight&lt;/code&gt; 和 &lt;code&gt;date&lt;/code&gt; 来排序，并且支持为文档指定分类排序时的权重，这样可以调整文档在分类中的顺序，这个功能通过文档中指定元数据 &lt;code&gt;taxonomyname_weight&lt;/code&gt; 来实现，其中 &lt;code&gt;taxonomyname&lt;/code&gt; 代表分类名。&lt;/p&gt;

&lt;h3 id=&#34;文档分组&#34;&gt;文档分组&lt;/h3&gt;

&lt;p&gt;当在列表页面展示多篇文档时，Hugo 支持我们根据文档类型、日期或者 Section 来分组显示文档。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;按照 Section 分组&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.GroupBy &amp;quot;Section&amp;quot; }}
  &amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
      {{ range .Pages }}
      &amp;lt;li&amp;gt;
      &amp;lt;a href=&amp;quot;{{ .Permalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;
      &amp;lt;div class=&amp;quot;meta&amp;quot;&amp;gt;{{ .Date.Format &amp;quot;Mon, Jan 2, 2006&amp;quot; }}&amp;lt;/div&amp;gt;
      &amp;lt;/li&amp;gt;
      {{ end }}
  &amp;lt;/ul&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照日期分组&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照发布日期分组&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.GroupByPublishDate &amp;quot;2006-01&amp;quot; }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;按照其它元信息分组&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.GroupByParam &amp;quot;param_key&amp;quot; }}
    &amp;lt;!-- ... --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;反转分组排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range (.Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot;).Reverse }}
    &amp;lt;!-- 利用模板函数Reverse来反转 --&amp;gt;
  {{ end }}

  {{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;desc&amp;quot; }}
    &amp;lt;!-- 或者直接指定排序方向 --&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;组内文档排序&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range .Data.Pages.GroupByDate &amp;quot;2006-01&amp;quot; &amp;quot;asc&amp;quot; }}
  &amp;lt;h3&amp;gt;{{ .Key }}&amp;lt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
      {{ range .Pages.ByTitle }}
      &amp;lt;!-- 可以按照之前介绍排序文档的各种方法来排序组内文档 --&amp;gt;
      {{ end }}
  &amp;lt;/ul&amp;gt;
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文档过滤&#34;&gt;文档过滤&lt;/h3&gt;

&lt;p&gt;有时候也许想要排除某些文档在列表页面显示，Hugo 支持我们在列表页面限制文档显示数量以及限制显示的文档种类。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;限制文档显示数量&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range first 10 .Data.Pages }}
      &amp;lt;!-- 利用模板函数first，只显示排在前面的10篇文档 --&amp;gt;
      {{ .Render &amp;quot;summary&amp;quot; }}
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;根据条件过滤某些文档&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;  {{ range where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot; }}
     &amp;lt;!-- 利用模板函数where，只筛选显示Section为post的文档 --&amp;gt;
     {{ .Content }}
  {{ end }}

  {{ range first 5 (where .Data.Pages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}
     &amp;lt;!-- 同时使用where和first --&amp;gt;
     {{ .Content }}
  {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;文档摘要&#34;&gt;文档摘要&lt;/h3&gt;

&lt;p&gt;Hugo 默认会截取文档前70个词作为文档摘要，并将摘要内容存放在模板页面变量 &lt;code&gt;.Summary&lt;/code&gt; ，同时提供模板变量 &lt;code&gt;.Truncated&lt;/code&gt; 来记录截取的摘要是否包含了文档的全部内容。同时 Hugo 还支持我们在内容文档中明确指定将哪些内容作为该文档的摘要，具体来说需要在文档中插入一行 &lt;code&gt;&lt;/code&gt; 来标识位于该行之前的内容作为摘要，同理 Hugo 会将摘要存放在模板页面变量 &lt;code&gt;.Summary&lt;/code&gt; ，并用模板变量 &lt;code&gt;.Truncated&lt;/code&gt; 标识摘要是否包含了文档全部内容。&lt;/p&gt;

&lt;p&gt;利用文档的摘要功能可以实现“阅读更多&amp;hellip;”这样的功能，示例如下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{ range first 10 .Data.Pages }}
  &amp;lt;div class=&amp;quot;summary&amp;quot;&amp;gt;
    &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ .RelPermalink }}&amp;quot;&amp;gt;{{ .Title }}&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
    {{ .Summary }}
  &amp;lt;/div&amp;gt;
  {{ if .Truncated }}
  &amp;lt;div class=&amp;quot;read-more-link&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;{{ .RelPermalink }}&amp;quot;&amp;gt;Read More…&amp;lt;/a&amp;gt;
  &amp;lt;/div&amp;gt;
  {{ end }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;</description>
        </item>
        
        <item>
            <title>10个实用的PHP正则表达式</title>
            <link>//blog.pytool.com/basic/2015-01-01-10%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
            <pubDate>Thu, 15 Jun 2017 14:08:22 CST</pubDate>
            <author>rinetd</author>
            <guid>//blog.pytool.com/basic/2015-01-01-10%E4%B8%AA%E5%AE%9E%E7%94%A8%E7%9A%84php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
            <description>&lt;p&gt;正则表达式是程序开发中一个重要的元素，它提供用来描述或匹配文本的字符串，如特定的字符、词或算式等。但在某些情况下，用正则表达式去验证一个字符串比较复杂和费时。本文为你介绍10种常见的实用PHP正则表达式的写法，希望对你的工作有所帮助。
1. 验证E-mail地址&lt;/p&gt;

&lt;p&gt;这是一个用于验证电子邮件的正则表达式。但它并不是高效、完美的解决方案。在此不推荐使用。&lt;/p&gt;

&lt;p&gt;$email = &amp;ldquo;test@ansoncheung.tk&amp;rdquo;;
if(preg&lt;em&gt;match(&amp;lsquo;/^[^0-9][a-zA-Z0-9&lt;/em&gt;]+([.][a-zA-Z0-9&lt;em&gt;]+)*[@][a-zA-Z0-9&lt;/em&gt;]+([.][a-zA-Z0-9_]+)*[.][a-zA-Z]{2,4}$/&amp;lsquo;,$email)){
    echo &amp;ldquo;Your email is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong email address format&amp;rdquo;;
}&lt;/p&gt;

&lt;p&gt;为了更加有效验证电子邮件地址，推荐使用filer_var。&lt;/p&gt;

&lt;p&gt;if(filter_var(&amp;lsquo;test+email@ansoncheung&amp;rsquo;, FILTER_VALIDATE_EMAIL)){
    echo &amp;ldquo;Your email is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong email address format.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证用户名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一个用于验证用户名的实例，其中包括字母、数字（A-Z，a-z，0-9）、下划线以及最低5个字符，最大20个字符。同时，也可以根据需要，对最小值和最大值做合理的修改。&lt;/p&gt;

&lt;p&gt;$username = &amp;ldquo;user_name12&amp;rdquo;;
if(preg&lt;em&gt;match(&amp;lsquo;/^[a-z\d&lt;/em&gt;]{5,20}$/i&amp;rsquo;, $username)){
    echo &amp;ldquo;Your username is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong username format.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证电话号码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一个验证美国电话号码的实例。&lt;/p&gt;

&lt;p&gt;$phone = &amp;ldquo;(021)423-2323&amp;rdquo;;
if(preg_match(&amp;lsquo;/&lt;span class=&#34;MathJax_Preview&#34;&gt;(?\d{3})&lt;/span&gt;&lt;script type=&#34;math/tex&#34;&gt;?\d{3}&lt;/script&gt;?[-\s.]?\d{3}[-\s.]\d{4}/x&amp;rsquo;, $phone)){
    echo &amp;ldquo;Your phone number is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong phone number.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证IP地址&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一个用来验证IPv4地址的实例。&lt;/p&gt;

&lt;p&gt;$IP = &amp;ldquo;198.168.1.78&amp;rdquo;;
if(preg_match(&amp;lsquo;/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/&amp;lsquo;,$IP)) {
    echo &amp;ldquo;Your IP address is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong IP address.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证邮政编码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一个用来验证邮政编码的实例。&lt;/p&gt;

&lt;p&gt;$zipcode = &amp;ldquo;12345-5434&amp;rdquo;;
if(preg_match(&amp;ldquo;/^([0-9]{5})(-[0-9]{4})?$/i&amp;rdquo;,$zipcode)){
   echo &amp;ldquo;Your Zip code is ok.&amp;rdquo;;
}else{
   echo &amp;ldquo;Wrong Zip code.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证SSN（社会保险号）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是一个验证美国SSN的实例。&lt;/p&gt;

&lt;p&gt;$ssn = &amp;ldquo;333-23-2329&amp;rdquo;;
if(preg_match(&amp;lsquo;/&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:d&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:d&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;{3}-[\d]{2}-[\d]{4}$/&amp;lsquo;,$ssn)){
    echo &amp;ldquo;Your SSN is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong SSN.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证信用卡号&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$cc = &amp;ldquo;378282246310005&amp;rdquo;;
if(preg_match(&amp;lsquo;/^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6011[0-9]{12}|3(?:0[0-5]|[68][0-9])[0-9]{11}|3[47][0-9]{13})$/&amp;lsquo;, $cc)){
    echo &amp;ldquo;Your credit card number is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong credit card number.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;验证域名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$url = &amp;ldquo;&lt;a href=&#34;http://ansoncheung.tk/&amp;quot;&#34;&gt;http://ansoncheung.tk/&amp;quot;&lt;/a&gt;;
if (preg&lt;em&gt;match(&amp;lsquo;/^(http|https|ftp):\/\/([A-Z0-9][A-Z0-9&lt;/em&gt;-]&lt;em&gt;(?:.[A-Z0-9][A-Z0-9_-]&lt;/em&gt;)+):?(\d+)?\/?/i&amp;rsquo;, $url)) {
    echo &amp;ldquo;Your url is ok.&amp;rdquo;;
}else{
    echo &amp;ldquo;Wrong url.&amp;rdquo;;
}&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;从特定URL中提取域名&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$url = &amp;ldquo;&lt;a href=&#34;http://ansoncheung.tk/articles&amp;quot;&#34;&gt;http://ansoncheung.tk/articles&amp;quot;&lt;/a&gt;;
preg_match(&amp;lsquo;@^(?:http://)?([^/]+)@i&amp;rsquo;, $url, $matches);
$host = $matches[1];
echo $host;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;将文中关键词高亮显示&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;$text = &amp;ldquo;Sample sentence from AnsonCheung.tk, regular expression has become popular in web programming. Now we learn regex. According to wikipedia, Regular expressions (abbreviated as regex or regexp, with plural forms regexes, regexps, or regexen) are written in a formal language that can be interpreted by a regular expression processor&amp;rdquo;;
$text = preg_replace(&amp;ldquo;/\b(regex)\b/i&amp;rdquo;, &amp;lsquo;&lt;span style=&#34;background:#5fc9f6&#34;&gt;\1&lt;/span&gt;&amp;rsquo;, $text);
echo $text;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:d&#34;&gt;\d &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:d&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
